package com.cwa.client.web;


import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;

import com.cwa.client.dto.CustomerDto;
import com.cwa.client.dto.RuturnMessageDto;
import com.cwa.client.dto.VideoDto;
import com.cwa.client.model.Tb_Vedio_Audit;
import com.cwa.client.service.AdvertiseInfoService;
import com.cwa.client.service.AdvertiseVideoService;
import com.cwa.client.service.FileService;
import com.cwa.client.utils.Constant;
import com.cwa.client.utils.GobalProperties;

import freemarker.template.Configuration;
import freemarker.template.Template;
import net.sf.json.JSONObject;

@Controller
@RequestMapping("/*/video")
public class AdVideoController extends BaseController<GobalRespParameter> implements Constant{

	private static String FTL_NAME="muban";
	private static String BASE_UPLOAD_HTML="STREAM_FILE_REPOSITORY";
	@Resource// 普通用户service层
	private AdvertiseInfoService advertiseInfoService;
	
	@Resource// 普通用户service层
	private AdvertiseVideoService advertiseVideoService;
	
	@Resource//文件上传
	private FileService fileService;
	
	@RequestMapping("/queryAdVideoInfo.do")
	public void queryAdVideoInfo(HttpServletRequest req, HttpServletResponse res) throws Exception{
		RuturnMessageDto parameter=new RuturnMessageDto();
		parameter.setSuccess(false);
		//获取请求参数并判断是否为空getPageModel
		String adNo= getParameter(req, "adNo");
		try {
			if(adNo!=null){//判断参数是否正确
				//dto.setPageNo(Integer.parseInt(pageNo));
				VideoDto dto = advertiseVideoService.findByOrderNo(adNo);
				
				if("2".equals(dto.getFile_type())||"3".equals(dto.getFile_type())){
					findHtmlContext(dto);//获取html内容
				}
				writeLog("", "==== mailingAddress:"+getParameter(req, "mailingAddress"), LOGLEVEL_INFO, AdVideoController.class);
				parameter.setData(dto);
				parameter.setSuccess(true);
				writeLog("", "query advertise info success! data:"+dto, LOGLEVEL_INFO, AdVideoController.class);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		writeJSON(res, parameter);
		parameter=null;
	}
	@RequestMapping("/operateAdVideo.do")
	public void operateAdVideo(HttpServletRequest req, HttpServletResponse res, VideoDto dto,MultipartFile file) throws Exception{
		RuturnMessageDto parameter=new RuturnMessageDto();
		parameter.setSuccess(false);
		//获取请求参数并判断是否为空getPageModel
		try {
			writeLog("", "operateAdVideo.do  data:"+JSONObject.fromObject(dto), LOGLEVEL_INFO, AdVideoController.class);
			CustomerDto customerDto=(CustomerDto)req.getSession().getAttribute(SESSION_USER);//session得到user信息
			VideoDto dto1 = advertiseVideoService.findByOrderNo(dto.getSerial_number());
			
			writeLog("", dto.getSerial_number()+" ==== findById Tb_Vedio_Audit  entity:"+(dto1==null?"":dto1.toString()), LOGLEVEL_INFO, AdVideoController.class);
			
			if(dto1==null){
				Tb_Vedio_Audit entity=new Tb_Vedio_Audit();
				entity.setCommit_id(customerDto.getAccount_id());
				entity.setCommit_time(new Timestamp(System.currentTimeMillis()));
				if("2".equals(dto.getFile_type())||"3".equals(dto.getFile_type())){
					entity.setFile_name(dto.getFile_name()+FTL_NAME+dto.getModel()+".html");
				}else{
					entity.setFile_name(dto.getFile_name());
				}
				entity.setFile_path(dto.getFile_path()+File.separator+entity.getFile_name());
				entity.setIntroduction(dto.getIntroduction());
				entity.setName(dto.getName());
				entity.setPlay_path("");//留空
				entity.setSerial_number(dto.getSerial_number());
				entity.setVedio_type(dto.getVedio_type());
				entity.setAudit_id("");
				entity.setAudit_status(ONE);
				entity.setOld_file_name(dto.getOld_file_name());
				entity.setFile_type(dto.getFile_type());
				entity.setAudit_datetime(new Timestamp(System.currentTimeMillis()));
				entity.setOrder_type(dto.getOrder_type()==null?1:2);
				advertiseVideoService.saveVedioAndUpdateOrder(entity);
				if("2".equals(dto.getFile_type())||"3".equals(dto.getFile_type())){
					createHtmlByImg(req,dto,null);
				}
				writeLog("", dto.getSerial_number()+" ==== insert success entity:"+entity.toString(), LOGLEVEL_INFO, AdVideoController.class);
			}else{
				Tb_Vedio_Audit entity=new Tb_Vedio_Audit();
				BeanUtils.copyProperties(entity,dto1);
				entity.setIntroduction(util.isNull(dto.getIntroduction())?entity.getIntroduction():dto.getIntroduction());
				entity.setName(util.isNull(dto.getName())?entity.getName():dto.getName());
				entity.setVedio_type(util.isNull(dto.getVedio_type()+"")?entity.getVedio_type():dto.getVedio_type());
				if("2".equals(dto.getFile_type())||"3".equals(dto.getFile_type())){
					if(dto.getFile_name().indexOf(".html")<0){//如果是新名称则重新生成文件
						createHtmlByImg(req,dto,entity);
						entity.setFile_name(dto.getFile_name()+FTL_NAME+dto.getModel()+".html");
						entity.setFile_path(dto.getFile_path()+File.separator+entity.getFile_name());
					}
				}else{
					entity.setFile_name(util.isNull(dto.getOld_file_name())?entity.getFile_name():dto.getFile_name());
					entity.setFile_path(util.isNull(dto.getFile_path())?entity.getFile_path():dto.getFile_path()+File.separator+entity.getFile_name());
				}
				entity.setOld_file_name(util.isNull(dto.getOld_file_name())?entity.getFile_path():dto.getOld_file_name());
				entity.setPlay_path("");//留空
				entity.setAudit_status(ONE);
				advertiseVideoService.update(entity);
				writeLog("", "==== update success entity:"+entity.toString(), LOGLEVEL_INFO, AdVideoController.class);
			}
			parameter.setData(null);//RespCodeEnum.SUCCESS.getCode()
			parameter.setSuccess(true);
			writeLog("", "query advertise info success! ", LOGLEVEL_INFO, AdVideoController.class);
		} catch (Exception e) {
			e.printStackTrace();
		}
		writeJSON(res, parameter);
		parameter=null;
	}

	/**
	 * 上传图片(用于“视频上传”)
	 * @param req
	 * @param res
	 * @param file
	 * @throws Exception*/
	
	@RequestMapping("/uploadADPic.do")
	public void uploadPicForChangeAD(HttpServletRequest req,HttpServletResponse res,MultipartFile file) throws Exception{
		String userName = req.getSession().getAttribute(SESSION_USER_NAME).toString();
		writeLog(LOGTYPE_CONTROLLER, "User "+userName+" upload pic . fileName:"+file.getOriginalFilename(), LOGLEVEL_INFO, AdVideoController.class);
		//System.out.println("-----------data:image/jpeg;base64,"+new String(MD5Util.base64Encode(file.getBytes())));
		RuturnMessageDto rmt = fileService.uploadPicFile(req, file, "");
		writeJSON(res, rmt);
	} 
	
	/*@RequestMapping(value = "/showVideoPicBypath.do")
	public void showVideoPicBypath(HttpServletRequest req,HttpServletResponse res) throws Exception{
		showIdPic(req,res);//显示图片
	} */
	/**
	 * 根据上传图片和内容生成html
	 * @param req
	 * @param res
	 * @param file
	 * @throws Exception
	 */
	public void createHtmlByImg(HttpServletRequest req,VideoDto dto,Tb_Vedio_Audit entity) throws Exception{
		
		writeLog(LOGTYPE_CONTROLLER, "create html begin!  model:"+dto.getModel()+"===imgUrl:"+dto.getImgUrl()+"===img:"+dto.getImg()+"===title:"+dto.getTitle()+"===context:"+dto.getContext(), LOGLEVEL_INFO, AdVideoController.class);
		if(entity!=null){
			/*File file=new File(GobalProperties.getGobalConfig().getValueByKey(BASE_UPLOAD_HTML)+File.separator+entity.getFile_path());
			File fileTemp=new File(GobalProperties.getGobalConfig().getValueByKey(BASE_UPLOAD_HTML)+File.separator+entity.getFile_path()+".temp");
			writeLog(LOGTYPE_CONTROLLER, "delete path: "+GobalProperties.getGobalConfig().getValueByKey(BASE_UPLOAD_HTML)+File.separator+entity.getFile_path(), LOGLEVEL_INFO, AdVideoController.class);
			file.deleteOnExit();
			fileTemp.deleteOnExit();
			writeLog(LOGTYPE_CONTROLLER, "delete old html success! ", LOGLEVEL_INFO, AdVideoController.class);*/
		}
		if(dto.getImgUrl()!=null){
			dto.setImg(showIdPic(dto.getImgUrl().substring(dto.getImgUrl().lastIndexOf("images")+7)));//图片转base64
		}
		// 获取配置项
		Configuration configuration = new Configuration(Configuration.VERSION_2_3_26);
		// 设置模板目录
		configuration.setDirectoryForTemplateLoading(new File(req.getSession().getServletContext().getRealPath("")+"WEB-INF"+File.separator+"ftl"));
		// 设置编码
		configuration.setDefaultEncoding("utf-8");
		
		// 获取模板
		Template t = configuration.getTemplate(FTL_NAME+dto.getModel()+".ftl");
		File f=new File(GobalProperties.getGobalConfig().getValueByKey(BASE_UPLOAD_HTML)+File.separator+dto.getFile_path());
		if(!f.exists()){
			f.mkdirs();
		}
		// 输出流
		Writer writer = new OutputStreamWriter(new FileOutputStream
				(GobalProperties.getGobalConfig().getValueByKey(BASE_UPLOAD_HTML)+File.separator+dto.getFile_path()+File.separator+dto.getFile_name()+FTL_NAME+dto.getModel()+".html"),"UTF-8");
		// 输出流
		Writer writerTemp = new OutputStreamWriter(new FileOutputStream
				(GobalProperties.getGobalConfig().getValueByKey(BASE_UPLOAD_HTML)+File.separator+dto.getFile_path()+File.separator+dto.getFile_name()+FTL_NAME+dto.getModel()+".html.temp"),"UTF-8");
		
		
		// 封装参数
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("title", dto.getTitle());
		map.put("context", dto.getContext());
		map.put("imgUrl",dto.getImg());
		// 产出文件
		t.process(map, writer);
		map.put("imgUrl",dto.getImgUrl());
		// 产出temp文件
		t.process(map, writerTemp);
		writeLog(LOGTYPE_CONTROLLER, "create html end!", LOGLEVEL_INFO, AdVideoController.class);
	}
	
	/**
	 * 获取html内容
	 * @param req
	 * @param res
	 * @param file
	 * @throws Exception
	 */
	public VideoDto findHtmlContext(VideoDto dto) throws Exception{
		if(dto==null){
			return null;
		}
		writeLog(LOGTYPE_CONTROLLER, "find html context begin!  dto:"+JSONObject.fromObject(dto), LOGLEVEL_INFO, AdVideoController.class);
		File file=new File(GobalProperties.getGobalConfig().getValueByKey(BASE_UPLOAD_HTML)+File.separator+dto.getFile_path()+".temp");
		if(file.exists()){
			InputStreamReader is=new InputStreamReader(new FileInputStream(file),"utf-8");
			BufferedReader br=new BufferedReader(is);
			StringBuilder title=new StringBuilder(),context=new StringBuilder(),imgData=new StringBuilder();
			boolean tbl=false,cbl=false,ibl=false;
			dto.setModel(dto.getFile_path().substring(dto.getFile_path().indexOf(FTL_NAME)+FTL_NAME.length(),dto.getFile_path().indexOf(FTL_NAME)+FTL_NAME.length()+1));
			while (true) {
				String str = br.readLine();
				if(str.trim().equals("<end />")){
					break;
				}
				if(ibl){//图片
					if(str.indexOf("</div>")>0){
						ibl=false;
						continue;
					}
					imgData.append(str);
					continue;
				}
				if(str.indexOf("id=\"img\"")>0){
					ibl=true;
				}
				
				if(tbl){//标题
					if(str.indexOf("</h2>")>0){
						tbl=false;
						continue;
					}
					title.append(str);
					continue;
				}
				if(str.indexOf("id=\"title\"")>0){
					tbl=true;
					continue;
				}
				
				if(cbl){//内容
					if(str.indexOf("</marquee>")>0){
						cbl=false;
						continue;
					}
					context.append(str);
					continue;
				}
				if(str.indexOf("id=\"context\"")>0){
					cbl=true;
				}
			}
			dto.setImg(imgData.toString());
			dto.setTitle(title.toString().trim());
			dto.setContext(context.toString().trim());
			writeLog(LOGTYPE_CONTROLLER, "+++imgData:"+imgData.toString()+"===title:"+title.toString()+"===context:"+context.toString(), LOGLEVEL_INFO, AdVideoController.class);
			br.close();
			is.close();
		}else{
			writeLog(LOGTYPE_CONTROLLER, "find html context fail!  file not exist!", LOGLEVEL_INFO, AdVideoController.class);
		}
		writeLog(LOGTYPE_CONTROLLER, "find html context end!  dto:"+JSONObject.fromObject(dto), LOGLEVEL_INFO, AdVideoController.class);
		return dto;
	}
	
	
	public static void main(String[] args) throws IOException {
		//File file=new File("D:/work\20171110115628muban1.html");
		File fileTemp=new File("D:\\20171116111004muban5.html.temp");
		/*file.deleteOnExit();
		fileTemp.deleteOnExit();*/
		
		InputStreamReader is=new InputStreamReader(new FileInputStream(fileTemp),"utf-8");
		BufferedReader br=new BufferedReader(is);
		while (true) {
			String str = br.readLine();
			if(str.trim().equals("<end />")){
				break;
			}
		}
		is.close();
		br.close();
	}
}
