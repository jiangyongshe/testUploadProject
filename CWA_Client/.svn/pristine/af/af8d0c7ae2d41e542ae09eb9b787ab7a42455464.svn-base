package com.cwa.client.web.nettytcpsocket;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;

import com.cwa.client.dto.BankServerTcpDto;
import com.cwa.client.utils.Constant;
import com.cwa.client.utils.LogWriteUtil;

/**
 * 在线支付请求
 * 
 * @author java team
 *
 */
public class PayApiTcpClient {

	private BankServerTcpDto bankApiServer;

	public PayApiTcpClient(BankServerTcpDto bankApiServer) {
		this.bankApiServer = bankApiServer;
	}

	/**
	 * 同步发送并且接收数据
	 * 
	 * @param requestData
	 * @return
	 */
	public String send(String requestData) {
		String receivedString = null;
		InetSocketAddress inetSocketAddress = null;
		SocketChannel socketChannel = null;
		try {
			inetSocketAddress = new InetSocketAddress(bankApiServer.getServerIp(), bankApiServer.getServerPort());

			LogWriteUtil.getSingleton().writeLog("", " inetSocketAddress  new success ", Constant.LOGLEVEL_INFO,
					PayApiTcpClient.class);

			socketChannel = SocketChannel.open(inetSocketAddress);
			socketChannel.configureBlocking(true);
			ByteBuffer readbuffer = ByteBuffer.allocate(1024 * 1024);// 分配缓冲区大小

			socketChannel.write(ByteBuffer.wrap(requestData.getBytes()));
			// 从server接受消息
			socketChannel.read(readbuffer);

			readbuffer.flip();// 准备读取

			// 将字节转化为字符串
			StringBuffer buffer = new StringBuffer();
			while (readbuffer.hasRemaining()) {
				char d = (char) readbuffer.get();
				buffer.append(d);
				// receivedString += String.valueOf((char) readbuffer.get());
			}
			receivedString = buffer.toString();

			buffer = null;
			System.out.println("client receive msg===" + receivedString);

		} catch (IOException e) {
			e.printStackTrace();
			receivedString = null;

			LogWriteUtil.getSingleton().writeLog("", " PayApiTcpClient IOException " + e.getMessage(),
					Constant.LOGLEVEL_ERROR, PayApiTcpClient.class);

		} catch (Exception e) {
			e.printStackTrace();

			LogWriteUtil.getSingleton().writeLog("", " PayApiTcpClient Exception " + e.getMessage(),
					Constant.LOGLEVEL_ERROR, PayApiTcpClient.class);

			receivedString = null;
		} finally {
			if (socketChannel != null && (socketChannel.isConnected() || socketChannel.isOpen())) {
				try {
					socketChannel.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}

			if (inetSocketAddress != null) {
				inetSocketAddress = null;
			}
		}

		LogWriteUtil.getSingleton().writeLog("", " Client received data " + receivedString, Constant.LOGLEVEL_ERROR,
				PayApiTcpClient.class);

		return receivedString;
	}
}
