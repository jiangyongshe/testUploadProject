package com.cwa.client.web;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.ServletRequestUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.support.RequestContext;

import com.cwa.client.dao.ADCommissionDao;
import com.cwa.client.dao.AdvertiseOrderDao;
import com.cwa.client.dao.AdvertiserDao;
import com.cwa.client.dao.BuyInformationDao;
import com.cwa.client.dao.ClientInOutMoneyDao;
import com.cwa.client.dto.AdDto;
import com.cwa.client.dto.BankServerTcpDto;
import com.cwa.client.dto.CustomerDto;
import com.cwa.client.dto.RuturnMessageDto;
import com.cwa.client.model.Tb_Advertiser;
import com.cwa.client.model.Tb_Bank_Card_Info;
import com.cwa.client.model.Tb_Order_Number;
import com.cwa.client.model.Tb_client_in_out_money;
import com.cwa.client.redis.UserRedis;
import com.cwa.client.service.AdvertiserService;
import com.cwa.client.service.AgentService;
import com.cwa.client.service.CustomerWalletService;
import com.cwa.client.service.FileService;
import com.cwa.client.service.OrderService;
import com.cwa.client.service.SalesmanService;
import com.cwa.client.service.ShoppCartService;
import com.cwa.client.service.UserService;
import com.cwa.client.service.WithdrawService;
import com.cwa.client.utils.Constant;
import com.cwa.client.utils.DateUtils;
import com.cwa.client.utils.LogWriteUtil;
import com.cwa.client.utils.RegUtil;
import com.cwa.client.utils.RespCodeEnum;
import com.cwa.client.utils.ipUtil;
import com.cwa.client.web.nettytcpsocket.PayUtil;
import com.cwa.client.web.nettytcpsocket.RequestMsgDto;
import com.cwa.client.web.nettytcpsocket.RespMsgDto;

import net.sf.json.JSONObject;

@Controller
@RequestMapping("/*/exclude")
public class ExcludeRequestController extends BaseController<GobalRespParameter> implements Constant{
	
	private static final LogWriteUtil logWriteUtil = LogWriteUtil.getSingleton();
	
	@Resource// 普通用户service层
	private UserService userService;
	
	@Resource// 购物车
	private ShoppCartService shoppCartService;
	
	@Resource
	private UserRedis userRedis;
	
	@Resource//代理service层
	private AgentService agentService;
	
	@Resource//销售员service层
	private SalesmanService salesmanService;
	
	@Resource// 广告商service层
	private AdvertiserService advertiserService;
	
	@Resource
	private FileService fileService;
	
	@Resource
	private AdvertiserDao advertiserDao;
	
	@Resource
	private AdvertiseOrderDao advertiseOrderDao;
	
	@Resource// 广告求购信息
	private BuyInformationDao buyInformationDao;
	
	@Resource
	CustomerWalletService customerWalletService;
	
	@Resource
	private ClientInOutMoneyDao clientInOutMoneyDao;
	
	@Resource
	private OrderService orderService;
	
	@Resource
	private BankServerTcpDto bankApiServer;
	
	@Resource
	private WithdrawService withdrawService;
	
	/**
	 * 转发到首页
	 * @return
	 */
	@RequestMapping("/forward/home.do")
	public String gotoHome(){
		return "index";
	}
	
	@Resource
	private ADCommissionDao adCommissionDao;
	
	@RequestMapping("/redirect/home.do")
	public void gotoHome(HttpServletRequest req,HttpServletResponse res) throws Exception{
		res.sendRedirect("/chinese/exclude/forward/home.do");
	}
	
	/**
	 * 充值-支付-同步返回
	 * @return
	 */
	@RequestMapping("/pay/alipayReturnUrl.do")
	public void payReturnUrl(HttpServletRequest req, HttpServletResponse res) throws Exception{
		System.out.println("===========return url :"+req.getRequestURL());
		if("00".equals(getParameter(req, "respCode"))){
			res.sendRedirect("/chinese/html/chongzhizhifuchenggong.html");
		}else{
			//res.sendRedirect("/chinese/html/chongzhizhifushibai.html");
			res.sendRedirect("/chinese/html/chongzhizhifuchenggong.html");
		}
	}
	
	/**
	 * 订单-支付-同步返回
	 * @return
	 */
	@RequestMapping("/orderPay/alipayOrderReturnUrl.do")
	public void alipayOrderReturnUrl(HttpServletRequest req, HttpServletResponse res) throws Exception{
		System.out.println("===========return url :"+req.getRequestURL());
		
		
		if("00".equals(getParameter(req, "respCode"))){
			res.sendRedirect("/chinese/html/dingdanzhifuchenggong.html");
		}else{
			//res.sendRedirect("/chinese/html/dingdanzhifushibai.html");
			res.sendRedirect("/chinese/html/dingdanzhifuchenggong.html");
		}
	}
	
	/**
	 * 手机-充值-支付-同步返回
	 * @return
	 */
	@RequestMapping("/payMobile/alipayReturnUrl.do")
	public void payMobileReturnUrl(HttpServletRequest req, HttpServletResponse res) throws Exception{
		System.out.println("===========return url :"+req.getRequestURL()+"====+orderNo"+getParameter(req, "tNo"));
		Map<String, String> map = new PayUtil().getAllRequestParam(req, bankApiServer.getCharSet());
		if("00".equals(map.get("respCode"))){
			res.sendRedirect("/chinese/mobile/html/chongzhichenggong.html");
		}else{
			res.sendRedirect("/chinese/mobile/html/chongzhishibai.html");
		}
	}
	/**
	 * 手机-订单-支付-同步返回
	 * @return
	 */
	@RequestMapping("/orderPayMobile/alipayOrderReturnUrl.do")
	public void alipayOrderMobileReturnUrl(HttpServletRequest req, HttpServletResponse res) throws Exception{
		System.out.println("===========return url :"+req.getRequestURL()+"====+orderNo"+getParameter(req, "tNo"));
		Map<String, String> map = new PayUtil().getAllRequestParam(req, bankApiServer.getCharSet());
		if("00".equals(map.get("respCode"))){
			res.sendRedirect("/chinese/mobile/html/zhifuchenggong.html");
		}else{
			res.sendRedirect("/chinese/mobile/html/zhifushibai.html");
		}
		
	}
	
	/**
	 * 转发到登录页
	 * @return
	 */
	@RequestMapping("/forward/login.do")
	public String gotoLogin(){
		return "login";
	}
	
	/**
	 * 转发到广告店铺
	 * @return
	 */
	@RequestMapping("/forward/adStore.do")
	public String adStore(){
		return "adStore";
	}
	
	/**
	 * 转发到求购信息
	 * @return
	 */
	@RequestMapping("/forward/askToBuy.do")
	public String askToBuy(){
		return "askToBuy";
	}
	
	/**
	 * 转发到忘记密码
	 * @return
	 */
	@RequestMapping("/forward/forgetPwd.do")
	public String gotoForgetPassword(){
		return "forgetPassword";
	}
	
	/**
	 * 分页查询推荐广告
	 * @param request
	 */
	@RequestMapping(value="/queryRecommendAd.do")
	public void queryRecommendAd(HttpServletRequest req, HttpServletResponse res) throws Exception{
		RuturnMessageDto parameter=new RuturnMessageDto();
		parameter.setSuccess(false);
		Map<String, Object> map=new HashMap<>();
		String pageSize= getParameter(req, "pageSize");
		String pageNo= getParameter(req, "pageNo");
		String addr=getParameter(req, "mailingAddress");
		String deviceIndustry=getParameter(req, "deviceIndustry");
		String adName=getParameter(req, "adName");
		try {
			if(pageSize==null){//每页大写为空则默认5条
				pageSize=NINE+"";
			}
			if(pageNo==null){//当前页为空则默认首页
				pageNo=ONE+"";
			}
			if(util.isNumber(pageSize)&&util.isNumber(pageNo)){//判断参数是否正确
				AdDto adDto = new AdDto();
				adDto.setAdName(adName);
				adDto.setPageNo(Integer.parseInt(pageNo));
				adDto.setPageSize(Integer.parseInt(pageSize));
				adDto.setRecommed(ONE);
				adDto.setAddr(addr);
				adDto.setDevice_industry(deviceIndustry);
				map.put("data",advertiserDao.queryADForBuy(adDto));
				map.put("count",advertiserDao.queryADForBuyCount(adDto));
				parameter.setSuccess(true);
				parameter.setData(map);
			}
		}catch (Exception e) {
			parameter.setData(RespCodeEnum.global_unknow_expiration.getCode());
			e.printStackTrace();
		}
		writeLog("","====query queryRecommendAd success ! map:"+JSONObject.fromObject(map),LOGLEVEL_INFO,BaseController.class);
		writeJSON(res, parameter);
		parameter=null;
	}
	
	
	/**
	 * 加载图片(用于“成为广告商”和首页展示广告)
	 * @param req
	 * @param res
	 * @throws Exception
	 */
	@RequestMapping("/AD/loadADPic.do")
	public void loadADPic(HttpServletRequest req,HttpServletResponse res) throws Exception{
		fileService.loadPicFile(res, ServletRequestUtils.getStringParameter(req, "filePath",""));
	}
	
	/**
	 * 激活为店主
	 * @param req
	 * @param res
	 * @throws Exception
	 */
	@RequestMapping("/AD/activeAD.do")
	public void activeAD(HttpServletRequest req, HttpServletResponse res) throws Exception{
		// 返回的消息对象
		RuturnMessageDto rt = new RuturnMessageDto();
		// 判断是否登录
		if(req.getSession().getAttribute(SESSION_USER_NAME)==null){
			rt.setMsg("999");
			writeJSON(res, rt);
			return;
		}
		// 语言包
		RequestContext reqCt= new RequestContext(req);
		String userName = req.getSession().getAttribute(SESSION_USER_NAME).toString();
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "User "+userName+" active AD .", LOGLEVEL_INFO, ExcludeRequestController.class);
		//session得到user信息
		CustomerDto customerDto=(CustomerDto)req.getSession().getAttribute(SESSION_USER);
		// 判断是否已经激活过
		if(userService.getUser(customerDto.getMobile(), USERTYPE_CUSTOMER_ADVERTISER)!=null){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "User have active.", LOGLEVEL_INFO, ExcludeRequestController.class);
			rt.setMsg(reqCt.getMessage("active.ad.tip.havaActive"));
			writeJSON(res, rt);
			// 修改session
			req.getSession().setAttribute("userType",USERTYPE_CUSTOMER_ADVERTISER);
			return;
		}
		// 插入店主数据
		Tb_Advertiser entity = new Tb_Advertiser();
		entity.setMobile(customerDto.getMobile());
		entity.setReal_name(customerDto.getUser_name());
		entity.setUser_status(customerDto.getUser_status());
		entity.setOpen_date(new Timestamp(new Date().getTime()));
		entity.setEmail(customerDto.getEmail());
		entity.setAccount_id(customerDto.getAccount_id());
		entity.setAgent_id(customerDto.getAgent_id());
		entity.setAudit_status(ONE);
		entity.setCompany_id(customerDto.getCompany_id());
		entity.setPassword(customerDto.getPassword());
		entity.setReferrals_type(customerDto.getReferrals_type());
		entity.setReferrals_id(customerDto.getReferrals_id().toString());
		entity.setReg_status(ONE);
		entity.setSuperior(ONE);
		if(entity.getReferrals_type()==3){
			entity.setSuperior(TWO);
		}
		advertiserService.saveUserAndInit(entity);
		// 修改session
		req.getSession().setAttribute("userType",USERTYPE_CUSTOMER_ADVERTISER);
		// 激活成功
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "User active success.", LOGLEVEL_INFO, ExcludeRequestController.class);
		rt.setMsg(reqCt.getMessage("active.ad.tip.success"));
		rt.setSuccess(true);
		writeJSON(res, rt);
	}
	
	/**
	 * 查询店铺广告
	 */
	@RequestMapping("/AD/queryForStore.do")
	public void queryForStore(HttpServletRequest req, HttpServletResponse res) throws Exception{
		// 查询参数
		AdDto param = new AdDto();
		// 地址参数
		String addr = ServletRequestUtils.getStringParameter(req, "addr","");
		if(addr!=null&&!addr.trim().equals("")){
			addr = addr + "%";
			param.setAddr(addr);
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Addr:"+addr, LOGLEVEL_INFO, ExcludeRequestController.class);
		}
		// 价格参数
		String lessPrice = ServletRequestUtils.getStringParameter(req, "lessPrice","");
		Double lessPriceD = 0d;
		try {
			lessPriceD = Double.parseDouble(lessPrice);
			param.setLessPrice(lessPriceD.toString());
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "lessPrice:"+lessPriceD, LOGLEVEL_INFO, ExcludeRequestController.class);
		} catch (Exception e) {
			param.setLessPrice("");
		}
		String greaterPrice = ServletRequestUtils.getStringParameter(req, "greaterPrice","");
		Double greaterPriceD = 0d;
		try {
			greaterPriceD = Double.parseDouble(greaterPrice);
			param.setGreaterPrice(greaterPriceD.toString());
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "greaterPrice:"+greaterPriceD, LOGLEVEL_INFO, ExcludeRequestController.class);
		} catch (Exception e) {
			param.setGreaterPrice("");
		}
		// 店铺名
		String name = ServletRequestUtils.getStringParameter(req, "keyword","");
		if(name!=null&&!name.trim().equals("")){
			param.setName("%"+name+"%");
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "name:"+name, LOGLEVEL_INFO, ExcludeRequestController.class);
		}
		// 分页参数
		String pageNoStr = ServletRequestUtils.getStringParameter(req, "pageNo","");
		String pageSizeStr = ServletRequestUtils.getStringParameter(req, "pageSize","");
		if(Pattern.matches(REGEX_POSITIVE_INTEGER, pageNoStr)){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "pageNo:"+pageNoStr, LOGLEVEL_INFO, ExcludeRequestController.class);
			param.setPageNo(Integer.parseInt(pageNoStr));
		}
		if(Pattern.matches(REGEX_POSITIVE_INTEGER, pageSizeStr)){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "pageSizeStr:"+pageSizeStr, LOGLEVEL_INFO, ExcludeRequestController.class);
			param.setPageSize(Integer.parseInt(pageSizeStr));
		}
		// 查询并返回数据
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("data", advertiserDao.queryADForBuy(param));
		// 数据总量
		map.put("count", advertiserDao.queryADForBuyCount(param));
		writeJSON(res, map);
	}
	
	/**
	 * 充值-阿里支付异步回调URL
	 */
	@RequestMapping("/pay/alipayNotifyUrl.do")
	public void alipayNotifyUrl(HttpServletRequest req, HttpServletResponse res) throws Exception{
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%%alipayNotifyUrl success url:" + req.getRequestURL(),
				LOGLEVEL_INFO, ExcludeRequestController.class);
		 writeJSON(res,PAY_STATUS_SUCCESS);
		PayUtil payUtil = new PayUtil(bankApiServer);
		RequestMsgDto requestDto=new RequestMsgDto();
		if(getParameter(req, "out_trade_no")==null){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%% reqParameter is null",
					LOGLEVEL_INFO, ExcludeRequestController.class);
			return;
		}
		Map<String, String> map = payUtil.getAllRequestParam(req, bankApiServer.getCharSet());
		requestDto.setUuid(getParameter(req, "out_trade_no"));
		requestDto.setPayType(ALIPAY_TYPE1);
		requestDto.setInOutType(THREE);
		requestDto.setOrderNo(getParameter(req, "out_trade_no"));
		requestDto.setOrderAmount(getParameter(req, "sign"));
		requestDto.setContent(payUtil.getSignStr(map,PAY_SIGN+","+PAY_SIGN_TYPE));
		
		RespMsgDto resp = payUtil.checkSign(requestDto);
		if(RespCodeEnum.SUCCESS.getCode().equals(resp.getRespCode())){
			Tb_client_in_out_money inOutInfo = clientInOutMoneyDao.queryClientInOutInfo(requestDto.getOrderNo());
			if(inOutInfo!=null){
				if(inOutInfo.getStatus()==1){
					inOutInfo.setBank_flow(map.get("trade_no"));
					customerWalletService.notifySaveInfo(inOutInfo);
					logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%%alipayNotifyUrl end inOutInfo:" + JSONObject.fromObject(inOutInfo),
							LOGLEVEL_INFO, ExcludeRequestController.class);
				}
			}else{
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%%alipayNotifyUrl end order exception",
						LOGLEVEL_INFO, ExcludeRequestController.class);
			}
		}
		
	}
	
	/**
	 * 充值-微信支付异步回调URL
	 */
	@RequestMapping("/pay/wechatnotifyUrl.do")
	public void wechatnotifyUrl(HttpServletRequest req, HttpServletResponse res) throws Exception{
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%%wechatnotifyUrl success url:" + req.getRequestURL(),
				LOGLEVEL_INFO, ExcludeRequestController.class);
		PayUtil payUtil = new PayUtil(bankApiServer);
		RequestMsgDto requestDto=new RequestMsgDto();
		String respxml = payUtil.getDataFromInputStream(req);
		 Map<String, Object> reponseMap=new HashMap<String, Object>();
		 reponseMap.put("return_code", PAY_STATUS_SUCCESS);
		 reponseMap.put("return_msg", "OK");
		 String respXmlOK=payUtil.getWeChatPostXml(reponseMap);
		 writeJSON(res,respXmlOK);
		if(null==respxml){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%% respXml is null",
					LOGLEVEL_INFO, ExcludeRequestController.class);
			return;
		}
		Map<String, String> map = payUtil.getMapFromXML(respxml);
		if(PAY_STATUS_SUCCESS.equals(map.get("return_code"))){
			if(PAY_STATUS_SUCCESS.equals(map.get("result_code"))){
				requestDto.setUuid(map.get("out_trade_no"));
				requestDto.setPayType(WECHATTPAY1_TYPE);
				requestDto.setInOutType(THREE);
				requestDto.setOrderNo(map.get("out_trade_no"));
				requestDto.setOrderAmount(map.get("sign"));
				requestDto.setContent(payUtil.getSignStr(map,PAY_SIGN+","+PAY_SIGN_TYPE));
				
				RespMsgDto resp = payUtil.checkSign(requestDto);//签名验证
				orderDealBusiness(resp,map,"1");//订单业务处理
			}else{
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%%wechatnotifyUrl end respResultCode is not success result_code:"+map.get("result_code"),
						LOGLEVEL_INFO, ExcludeRequestController.class);
			}
		}else{
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%%wechatnotifyUrl end respReturnCode is not success return_code:"+map.get("return_code"),
					LOGLEVEL_INFO, ExcludeRequestController.class);
		}
	}
	
	
	//订单业务处理 businessType 1:充值  2:订单支付
	public void orderDealBusiness(RespMsgDto resp,Map<String, String> map,String businessType){
		try {
			if(RespCodeEnum.SUCCESS.getCode().equals(resp.getRespCode())){//签名验证通过
				Tb_client_in_out_money inOutInfo = clientInOutMoneyDao.queryClientInOutInfo(map.get("out_trade_no"));
				if(inOutInfo!=null){
					if(inOutInfo.getStatus()==1){//状态判断
						//用户和金额不匹配
						if(inOutInfo.getAccount_id().equals(map.get("attach"))&&inOutInfo.getAmount().multiply(new BigDecimal(100)).compareTo(new BigDecimal(map.get("total_fee")))==0){
							inOutInfo.setBank_flow(map.get("transaction_id"));
							if("1".equals(businessType)){//充值
								customerWalletService.notifySaveInfo(inOutInfo);
							}else if("2".equals(businessType)){//订单支付
								List<Tb_Order_Number> list = clientInOutMoneyDao.queryOrderReNumber(map.get("out_trade_no"));
								if(list.size()>0){
									orderService.payOrder(list, inOutInfo);
									logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%%wechatOrderNotifyUrl end inOutInfo:" + JSONObject.fromObject(inOutInfo),
											LOGLEVEL_INFO, ExcludeRequestController.class);
								}else{
									logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%%wechatOrderNotifyUrl order error end!!!!",
											LOGLEVEL_INFO, ExcludeRequestController.class);
								}
							}
							logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%%wechatnotifyUrl success end inOutInfo:" + JSONObject.fromObject(inOutInfo),
									LOGLEVEL_INFO, ExcludeRequestController.class);
						}else{
							logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%%wechatnotifyUrl end accountId or amount error inOutInfoAccountId-respAccountId:"+inOutInfo.getAccount_id()+"-"+map.get("attach")
									+"========inOutInfoAmount-respAmount:"+inOutInfo.getAmount()+"-"+map.get("total_fee"),
									LOGLEVEL_INFO, ExcludeRequestController.class);
						}
					}else{
						logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%%wechatnotifyUrl end inOutInfoStatus:" + inOutInfo.getStatus(),
								LOGLEVEL_INFO, ExcludeRequestController.class);
					}
				}else{
					logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%%wechatnotifyUrl end Tb_client_in_out_money is null",
							LOGLEVEL_INFO, ExcludeRequestController.class);
				}
			}else{
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%%wechatnotifyUrl end checkSign is not success code:"+resp.getRespCode(),
						LOGLEVEL_INFO, ExcludeRequestController.class);
			}
		} catch (Exception e) {
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%%wechatnotifyUrl end exception:"+e.getMessage(),
					LOGLEVEL_INFO, ExcludeRequestController.class);
			e.printStackTrace();
		}
	}
	
	/**
	 * 订单-阿里支付异步回调URL
	 */
	@RequestMapping("/orderPay/alipayOrderNotifyUrl.do")
	public void alipayOrderNotifyUrl(HttpServletRequest req, HttpServletResponse res) throws Exception{
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%%alipayOrderNotifyUrl success url:" + req.getRequestURL(),
				LOGLEVEL_INFO, ExcludeRequestController.class);
		 writeJSON(res,PAY_STATUS_SUCCESS);
		PayUtil payUtil = new PayUtil(bankApiServer);
		RequestMsgDto requestDto=new RequestMsgDto();
		Map<String, String> map = payUtil.getAllRequestParam(req, bankApiServer.getCharSet());
		if(getParameter(req, "out_trade_no")==null){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%% reqParameter is null",
					LOGLEVEL_INFO, ExcludeRequestController.class);
			return;
		}
		requestDto.setUuid(getParameter(req, "out_trade_no"));
		requestDto.setPayType(ALIPAY_TYPE1);
		requestDto.setInOutType(THREE);
		requestDto.setOrderNo(getParameter(req, "out_trade_no"));
		requestDto.setOrderAmount(getParameter(req, "sign"));
		requestDto.setContent(payUtil.getSignStr(map,PAY_SIGN+","+PAY_SIGN_TYPE));
		
		RespMsgDto resp = payUtil.checkSign(requestDto);
		if(RespCodeEnum.SUCCESS.getCode().equals(resp.getRespCode())){
			List<Tb_Order_Number> list = clientInOutMoneyDao.queryOrderReNumber(requestDto.getOrderNo());
			Tb_client_in_out_money inOutInfo = clientInOutMoneyDao.queryClientInOutInfo(requestDto.getOrderNo());
			if(inOutInfo!=null&&list.size()>0){
				if(inOutInfo.getStatus()==1){
					inOutInfo.setBank_flow(map.get("trade_no"));
					orderService.payOrder(list, inOutInfo);
					logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%%alipayOrderNotifyUrl end inOutInfo:" + JSONObject.fromObject(inOutInfo),
							LOGLEVEL_INFO, ExcludeRequestController.class);
				}
			}else{
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%%alipayOrderNotifyUrl end order exception",
						LOGLEVEL_INFO, ExcludeRequestController.class);
			}
		}
		
	}
	
	/**
	 * 订单-微信支付异步回调URL
	 */
	@RequestMapping("/orderPay/wechatOrderNotifyUrl.do")
	public void wechatOrderNotifyUrl(HttpServletRequest req, HttpServletResponse res) throws Exception{
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%%wechatOrderNotifyUrl success url:" + req.getRequestURL(),
				LOGLEVEL_INFO, ExcludeRequestController.class);
		PayUtil payUtil = new PayUtil(bankApiServer);
		RequestMsgDto requestDto=new RequestMsgDto();
		 Map<String, Object> reponseMap=new HashMap<String, Object>();
		 String respxml = payUtil.getDataFromInputStream(req);
		 reponseMap.put("return_code", PAY_STATUS_SUCCESS);
		 reponseMap.put("return_msg", "OK");
		 String respXmlOK=payUtil.getWeChatPostXml(reponseMap);
		 writeJSON(res,respXmlOK);
		if(null==respxml){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%% respXml is null",
					LOGLEVEL_INFO, ExcludeRequestController.class);
			return;
		}
		Map<String, String> map = payUtil.getMapFromXML(respxml);
		
		if(PAY_STATUS_SUCCESS.equals(map.get("return_code"))){
			if(PAY_STATUS_SUCCESS.equals(map.get("result_code"))){
				requestDto.setUuid(map.get("out_trade_no"));
				requestDto.setPayType(WECHATTPAY1_TYPE);
				requestDto.setInOutType(THREE);
				requestDto.setOrderNo(map.get("out_trade_no"));
				requestDto.setOrderAmount(map.get("sign"));
				requestDto.setContent(payUtil.getSignStr(map,PAY_SIGN+","+PAY_SIGN_TYPE));
				RespMsgDto resp = payUtil.checkSign(requestDto);//签名验证
				orderDealBusiness(resp,map,"2");//订单业务处理
			}else{
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%%wechatnotifyUrl end respResultCode is not success result_code:"+map.get("result_code"),
						LOGLEVEL_INFO, ExcludeRequestController.class);
			}
		}else{
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%%wechatnotifyUrl end respReturnCode is not success return_code:"+map.get("return_code"),
					LOGLEVEL_INFO, ExcludeRequestController.class);
		}
	}
	
	/**
	 * 银盛出金异步通知
	 * @param request
	 * @param response
	 * @throws Exception
	 */
	@RequestMapping(value = "/withDraw/ysPayWithdrawNotice.do")
	public void withDrawReturnNotice(HttpServletRequest request,HttpServletResponse response)throws Exception{
		String ip=ipUtil.getIpAddress(request);
		try {
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, " ys epay WithdrawNotice  ip:"+ip+" getWhiteIpList ip :"+bankApiServer.getWhiteIpList().get(0),
					LOGLEVEL_INFO, ExcludeRequestController.class); 
			if(!ip.equals(bankApiServer.getWhiteIpList().get(0))){
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, " ip is not in the whiteip list ",
						LOGLEVEL_INFO, ExcludeRequestController.class); 
				return;
			}
			
			PayUtil payUtil = new PayUtil(bankApiServer);
			Map<String, String> valideData = payUtil.getAllRequestParam(request, bankApiServer.getCharSet());
			String orderId="unknow out_trade_no";
			writeJSON(response, PAY_STATUS_SUCCESS.toLowerCase());
			if(valideData.containsKey("out_trade_no")&&!RegUtil.getUtil().isNull(valideData.get("out_trade_no"))){
				orderId=valideData.get("out_trade_no");
			}else{
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, orderId+ " out_trade_no is not find ",
						LOGLEVEL_INFO, ExcludeRequestController.class); 
				return;
			}
			
			String notify_time=valideData.get("notify_time");
			
			String trade_no=valideData.get("trade_no");
			
			String notify_type=valideData.get("notify_type");
			
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, notify_type+ " notify_time "+notify_time+" trade_no "+trade_no,
					LOGLEVEL_INFO, ExcludeRequestController.class); 
			if (!"directpay.status.sync".equalsIgnoreCase(notify_type)&&!"df.single.quick.status.sync".equalsIgnoreCase(notify_type)&&!"ysepay.df.single.notify".equalsIgnoreCase(notify_type)){
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, orderId+ " notify_type is not match "+notify_type,
						LOGLEVEL_INFO, ExcludeRequestController.class); 
				return;
			}
			
			RequestMsgDto requestDto=new RequestMsgDto();
			requestDto.setUuid(orderId);
			requestDto.setPayType(YSEPAY_TYPE);
			requestDto.setInOutType(THREE);
			requestDto.setOrderNo(orderId);
			requestDto.setOrderAmount(valideData.get("sign"));
			requestDto.setContent(payUtil.getSignStr(valideData,PAY_SIGN));
			
			
			
			RespMsgDto resp = payUtil.checkSign(requestDto);//验证签名
			
			if(!RespCodeEnum.SUCCESS.getCode().equals(resp.getRespCode())){
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, orderId+ " checkSign fail, error code"+resp.getRespCode(),
						LOGLEVEL_INFO, ExcludeRequestController.class); 
				return;
			}
			
			//检查数据是否存在
			Tb_client_in_out_money  dbinOutMoney=clientInOutMoneyDao.queryClientInOutInfo(orderId);
			if(dbinOutMoney==null||dbinOutMoney.getStatus()!=FIVE){
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, orderId+(dbinOutMoney==null?" is not in the db":" db had update "+dbinOutMoney.getStatus()),
						LOGLEVEL_INFO, ExcludeRequestController.class); 
				return;
			}
			
			//检查金额是否正确
			BigDecimal fee=new BigDecimal(valideData.get("fee"));
			BigDecimal total_amount=new BigDecimal(valideData.get("total_amount"));
			
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER,orderId+" total_amount "+total_amount+" fee "+fee+" db amount "+dbinOutMoney.getAmount(),LOGLEVEL_INFO, ExcludeRequestController.class);
			
			total_amount=total_amount.add(fee);
			
			if(dbinOutMoney.getAmount().compareTo(total_amount)!=ZERO){
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER," dbinOutMoney.getAmount() ["+dbinOutMoney.getAmount()+"] is not equal total_amount ",LOGLEVEL_INFO, ExcludeRequestController.class);
				return;
			}
			
			String trade_status = valideData.get("trade_status");
			String trade_status_description = valideData.get("trade_status_description") == null
					? "unknown reason" : valideData.get("trade_status_description");
			if(trade_status_description!=null&&trade_status_description.length()>=255){
				  trade_status_description=trade_status_description.substring(0, 254);
			  }
			if (YSPAY_TRADE_SUCCESS.equals(trade_status)) {
				dbinOutMoney.setStatus(TWO);//银行和系统都成功
				dbinOutMoney.setRemark("success ,finish"+trade_status_description);
			}else {// 如果失败是否需要自动退回交易系统
				dbinOutMoney.setStatus(FOUR);//银行返回失败
				dbinOutMoney.setRemark(trade_status_description);
			} 
			
			dbinOutMoney.setBank_flow(trade_no);
			dbinOutMoney.setActivate_time(DateUtils.string2Time(notify_time, DateUtils.DATE_FORMAT_DEFAULT));
			withdrawService.withDrawSuccess(dbinOutMoney);
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER,orderId+" update db success ",LOGLEVEL_INFO, ExcludeRequestController.class);
			
		} catch (Exception e) {
			 
			 e.printStackTrace();
		}
		
	}

   /**
    * 银联无跳转在线支付
    * @param request
    * @param response
    * @throws Exception
    */
	@RequestMapping(value = "/walletRechargePay/unPayNotify.do")
	public void walletRechargePay(HttpServletRequest request,HttpServletResponse response)throws Exception{
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER," unPay nojumpPay notice from  "+ipUtil.getIpAddress(request)+" start ",LOGLEVEL_INFO, ExcludeRequestController.class);
		
		 try {
			 
			 
			PayUtil payUtil = new PayUtil(bankApiServer);
			Map<String, String> reqParam = payUtil.getAllRequestParam(request, bankApiServer.getCharSet());
			
			 writeJSON(response,ALIYUN_SMS_CODE_OK.toLowerCase());//回写数据，告诉第三方接收成功
			
			 if(!reqParam.containsKey("orderId")||RegUtil.getUtil().isNull(reqParam.get("orderId"))){
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER," unPay nojumpPay unkonw  orderId",LOGLEVEL_INFO, ExcludeRequestController.class);
				return;
			}
			String orderId=reqParam.get("orderId");
			RequestMsgDto requestDto=new RequestMsgDto();
			requestDto.setUuid(orderId);
			requestDto.setPayType(UNPAY_TYPE);
			requestDto.setInOutType(THREE);
			requestDto.setOrderNo(orderId);
			requestDto.setOrderAmount(reqParam.get(PAY_SIGNATURE));
			requestDto.setContent(payUtil.getSignStr(reqParam,PAY_SIGNATURE));
			requestDto.setChartSet(reqParam.get("signPubKeyCert"));
			requestDto.setWebType(reqParam.get("reqReserved"));
			RespMsgDto resp = payUtil.checkSign(requestDto);//验证签名
			
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER,orderId+" unPay nojumpPay checkSign resp  "+(resp==null?"unknow code":resp.getRespCode()),LOGLEVEL_INFO, ExcludeRequestController.class);
			
			if(!RespCodeEnum.SUCCESS.getCode().equals(resp.getRespCode())){
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, orderId+ " checkSign fail, error code"+resp.getRespCode(),
						LOGLEVEL_INFO, ExcludeRequestController.class); 
				return;
			}
			
			//检查数据是否存在
			Tb_client_in_out_money  dbinOutMoney=clientInOutMoneyDao.queryClientInOutInfo(orderId);
			
			if(dbinOutMoney==null||dbinOutMoney.getStatus()!=FIVE){
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, orderId+(dbinOutMoney==null?" is not in the db":" db had update "+dbinOutMoney.getStatus()),
						LOGLEVEL_INFO, ExcludeRequestController.class); 
				return;
			}
			
			BigDecimal txnAmt=new BigDecimal(reqParam.get("txnAmt"));
			
			BigDecimal afterAmt=txnAmt.divide(BigDecimal.valueOf(100)).setScale(Constant.TWO, BigDecimal.ROUND_DOWN);
			
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER,orderId+" txnAmt "+txnAmt+" afterAmt "+afterAmt+" db amount "+dbinOutMoney.getAmount(),LOGLEVEL_INFO, ExcludeRequestController.class);
			
			
			if(dbinOutMoney.getAmount().compareTo(afterAmt)!=Constant.ZERO){
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, orderId+" dbinOutMoney.getAmount() ["+dbinOutMoney.getAmount()+"] is not equal total_amount ["+afterAmt+"]",
						LOGLEVEL_INFO, ExcludeRequestController.class); 
				return;
			}
			
			if(!"00".equals(reqParam.get("respCode"))){
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, orderId+" respCode "+reqParam.get("respCode")+" respMsg "+reqParam.get("respMsg"),
						LOGLEVEL_INFO, ExcludeRequestController.class); 
				return;
			}
			dbinOutMoney.setBank_flow(reqParam.get("queryId"));
			customerWalletService.notifySaveInfo(dbinOutMoney);
			
			//更新卡状态
			String cardCode=resp.getRespContent();
			List<Tb_Bank_Card_Info> list = adCommissionDao.queryBankCardInfo(dbinOutMoney.getAccount_id(),cardCode,FOUR);
			if(list.size()==0){
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Tb_Bank_Card_Info not exists！！！！ "+reqParam.get("respCode")+" respMsg "+reqParam.get("respMsg"),
						LOGLEVEL_INFO, ExcludeRequestController.class); 
			}else{
				Tb_Bank_Card_Info cardInfo=list.get(0);
				if(cardInfo.getStatus()!=ONE){
					cardInfo.setStatus(ONE);
					withdrawService.commissionBankCardInfoUpdate(cardInfo);
				}
			}
			
			//所有验证通过，继续业务操作
			/*dbinOutMoney.setStatus(SERIAL_STATUS_PASS);
			withdrawService.update(dbinOutMoney);*/
		} catch (Exception e) {
			e.printStackTrace();
		} 
	}
	
	/**
	    * 银联无跳转在线支付
	    * @param request
	    * @param response
	    * @throws Exception
	    */
		@RequestMapping(value = "/orderPay/unPayNotify.do")
		public void orderPay(HttpServletRequest request,HttpServletResponse response)throws Exception{
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER," unPay nojumpPay notice from  "+ipUtil.getIpAddress(request)+" start ",LOGLEVEL_INFO, ExcludeRequestController.class);
			
			 try {
				 
				 
				PayUtil payUtil = new PayUtil(bankApiServer);
				Map<String, String> reqParam = payUtil.getAllRequestParam(request, bankApiServer.getCharSet());
				
				 writeJSON(response,ALIYUN_SMS_CODE_OK.toLowerCase());//回写数据，告诉第三方接收成功
				
				 if(!reqParam.containsKey("orderId")||RegUtil.getUtil().isNull(reqParam.get("orderId"))){
					logWriteUtil.writeLog(LOGTYPE_CONTROLLER," unPay nojumpPay unkonw  orderId",LOGLEVEL_INFO, ExcludeRequestController.class);
					return;
				}
				String orderId=reqParam.get("orderId");
				RequestMsgDto requestDto=new RequestMsgDto();
				requestDto.setUuid(orderId);
				requestDto.setPayType(UNPAY_TYPE);
				requestDto.setInOutType(THREE);
				requestDto.setOrderNo(orderId);
				requestDto.setOrderAmount(reqParam.get(PAY_SIGNATURE));
				requestDto.setContent(payUtil.getSignStr(reqParam,PAY_SIGNATURE));
				requestDto.setChartSet(reqParam.get("signPubKeyCert"));
				requestDto.setWebType(reqParam.get("reqReserved"));
				
				RespMsgDto resp = payUtil.checkSign(requestDto);//验证签名
				
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER,orderId+" unPay nojumpPay checkSign resp  "+(resp==null?"unknow code":resp.getRespCode()),LOGLEVEL_INFO, ExcludeRequestController.class);
				
				if(!RespCodeEnum.SUCCESS.getCode().equals(resp.getRespCode())){
					logWriteUtil.writeLog(LOGTYPE_CONTROLLER, orderId+ " checkSign fail, error code"+resp.getRespCode(),
							LOGLEVEL_INFO, ExcludeRequestController.class); 
					return;
				}
				
				//检查数据是否存在
				Tb_client_in_out_money  dbinOutMoney=clientInOutMoneyDao.queryClientInOutInfo(orderId);
				
				if(dbinOutMoney==null||dbinOutMoney.getStatus()!=FIVE){
					logWriteUtil.writeLog(LOGTYPE_CONTROLLER, orderId+(dbinOutMoney==null?" is not in the db":" db had update "+dbinOutMoney.getStatus()),
							LOGLEVEL_INFO, ExcludeRequestController.class); 
					return;
				}
				
				BigDecimal txnAmt=new BigDecimal(reqParam.get("txnAmt"));
				
				BigDecimal afterAmt=txnAmt.divide(BigDecimal.valueOf(100)).setScale(Constant.TWO, BigDecimal.ROUND_DOWN);
				
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER,orderId+" txnAmt "+txnAmt+" afterAmt "+afterAmt+" db amount "+dbinOutMoney.getAmount(),LOGLEVEL_INFO, ExcludeRequestController.class);
				
				
				if(dbinOutMoney.getAmount().compareTo(afterAmt)!=Constant.ZERO){
					logWriteUtil.writeLog(LOGTYPE_CONTROLLER, orderId+" dbinOutMoney.getAmount() ["+dbinOutMoney.getAmount()+"] is not equal total_amount ["+afterAmt+"]",
							LOGLEVEL_INFO, ExcludeRequestController.class); 
					return;
				}
				
				if(!"00".equals(reqParam.get("respCode"))){
					logWriteUtil.writeLog(LOGTYPE_CONTROLLER, orderId+" respCode "+reqParam.get("respCode")+" respMsg "+reqParam.get("respMsg"),
							LOGLEVEL_INFO, ExcludeRequestController.class); 
					return;
				}
				List<Tb_Order_Number> list1 = clientInOutMoneyDao.queryOrderReNumber(requestDto.getOrderNo());
				dbinOutMoney.setBank_flow(reqParam.get("queryId"));
				orderService.payOrder(list1, dbinOutMoney);
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "#####====%%%%%unionPayOrderNotifyUrl end inOutInfo:" + JSONObject.fromObject(dbinOutMoney),
						LOGLEVEL_INFO, ExcludeRequestController.class);
				//更新卡状态
				String cardCode=resp.getRespContent();
				List<Tb_Bank_Card_Info> list = adCommissionDao.queryBankCardInfo(dbinOutMoney.getAccount_id(),cardCode,FOUR);
				if(list.size()==0){
					logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Tb_Bank_Card_Info not exists！！！！ "+reqParam.get("respCode")+" respMsg "+reqParam.get("respMsg"),
							LOGLEVEL_INFO, ExcludeRequestController.class); 
				}else{
					Tb_Bank_Card_Info cardInfo=list.get(0);
					if(cardInfo.getStatus()!=ONE){
						cardInfo.setStatus(ONE);
						withdrawService.commissionBankCardInfoUpdate(cardInfo);
					}
				}
				
				//所有验证通过，继续业务操作
				/*dbinOutMoney.setStatus(SERIAL_STATUS_PASS);
				withdrawService.update(dbinOutMoney);*/
			} catch (Exception e) {
				e.printStackTrace();
			} 
		}
	
}
