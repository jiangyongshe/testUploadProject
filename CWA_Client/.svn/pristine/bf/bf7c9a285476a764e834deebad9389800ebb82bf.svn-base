package com.cwa.client.web.app;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;

import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.RequestContext;

import com.cwa.client.constant.AppConatnt;
import com.cwa.client.service.FileService;
import com.cwa.client.utils.Constant;
import com.cwa.client.utils.DateEditor;
import com.cwa.client.utils.Encypter;
import com.cwa.client.utils.LogWriteUtil;
import com.cwa.client.utils.RespCodeEnum;
import com.cwa.client.utils.UniqId;
import com.cwa.client.utils.config.Configurations;
import com.cwa.client.web.BaseController;
import com.cwa.client.web.GobalRespParameter;

import net.sf.json.JSONObject;

@Controller
@RequestMapping("/app/fileUpload")
public class AppFileUpload extends BaseController<GobalRespParameter> implements Constant,AppConatnt {
	@RequestMapping("/videoUpload.do")
	private void appRegister(HttpServletRequest req,HttpServletResponse res,@RequestParam("fileName") MultipartFile file) throws Exception{
		GobalRespParameter parameter=new GobalRespParameter();
		// 语言包
		RequestContext reqCt= new RequestContext(req);
		try {
			// 判断是否上传了文件
			if (file.isEmpty()) {
				LogWriteUtil.getSingleton().writeLog(LOGTYPE_SERVICE, "Not upload file", LOGLEVEL_INFO, AppFileUpload.class);
				parameter.setRespMessge(reqCt.getMessage("file.tip.notUploadFile"));
				writeJSON(res, parameter);
				return;
			}
			// 判断文件是否太大
			byte[] bytes = file.getBytes();
			if (bytes.length > Long.parseLong(Encypter.getValueByKey("maxPicSize"))*10) {
				LogWriteUtil.getSingleton().writeLog(LOGTYPE_SERVICE, "File too big size is "+bytes.length+",max size is "+Long.parseLong(Encypter.getValueByKey("maxPicSize")), LOGLEVEL_INFO, AppFileUpload.class);
				parameter.setRespMessge(reqCt.getMessage("file.tip.fileTooBig")+(Long.parseLong(Encypter.getValueByKey("maxPicSize"))*10/1024/1024)+"m");
				writeJSON(res, parameter);
				return;
			}
			String basePath=Configurations.getFileRepository();
			String fileName=file.getOriginalFilename();
			String filepath=req.getParameter(MESSAGE)==null?DateEditor.getSingleDateEdite().getCurrentDateTimeAsString(DateEditor.FORMAT_yyyyMMdd):req.getParameter(MESSAGE);
			basePath=basePath+File.separator+filepath;
			LogWriteUtil.getSingleton().writeLog(LOGTYPE_SERVICE, "fileName:"+fileName+"=====filePath:"+basePath, LOGLEVEL_INFO, AppFileUpload.class);
			String newFileName=UniqId.getallSymbolArrayStr(32)+fileName.substring(fileName.lastIndexOf("."));
			file.transferTo(new File(basePath+File.separator+newFileName));
			
			parameter.setRespCode(RespCodeEnum.SUCCESS.getCode());
			parameter.setRespMessge(filepath);
			parameter.setUserName(newFileName);
		} catch (Exception e) {
			parameter.setRespCode(RespCodeEnum.global_unknow_expiration.getCode());
			e.printStackTrace();
		}
		res.setContentType("application/json;charset=utf-8");
		res.getWriter().write(JSONObject.fromObject(parameter).toString());
	}
}
