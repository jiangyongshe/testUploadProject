package com.cwa.client.web;

import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.codehaus.jackson.JsonEncoding;
import org.codehaus.jackson.JsonFactory;
import org.codehaus.jackson.JsonGenerator;
import org.codehaus.jackson.map.ObjectMapper;

import com.cwa.client.dao.DeviceVedioCountDao;
import com.cwa.client.dao.SystemSetDao;
import com.cwa.client.dto.AdvertiseInfoDto;
import com.cwa.client.dto.AdvertiserDto;
import com.cwa.client.dto.CustomerDto;
import com.cwa.client.dto.DeviceVedioCountDto;
import com.cwa.client.redis.UserRedis;
import com.cwa.client.service.AdvertiseInfoService;
import com.cwa.client.utils.Constant;
import com.cwa.client.utils.LogWriteUtil;
import com.cwa.client.utils.RegUtil;
import com.cwa.client.utils.ipUtil;

import net.sf.json.JSONObject;



public class BaseController<E extends GobalRespParameter> implements Constant {

	 
	protected static final String CMD_EDIT = "edit";
	protected static final String CMD_UPDATE = "update";
	protected static final String CMD_NEW = "new";
	protected static final String CMD_EDIT_STATUS = "status";
	protected static final String MODEL = "model";
	protected static final String CMD_ADD="add";
	protected static final String SESSION_SYS_USER = "SESSION_SYS_USER";
	protected static final String DEFAULT_TIME="2001-01-01 00:00:00";
	
	
	protected static ObjectMapper mapper = new ObjectMapper();

	protected static JsonFactory factory = mapper.getJsonFactory();
	
	protected static RegUtil util=RegUtil.getUtil();
	
	@Resource
	private DeviceVedioCountDao deviceVedioCountDao;
	
	@Resource// 普通用户service层
	private AdvertiseInfoService advertiseInfoService;
	
	@Resource// 普通用户service层
	private SystemSetDao systemSetDao;
	/**
	 * 通用写json数据
	 * 
	 * @param response
	 * @param json
	 * @throws IOException
	 */
	protected void writeJSON(HttpServletResponse response, String json)
			throws IOException {
		PrintWriter out = null;
		response.setContentType("text/html;charset=utf-8");
		try {
			out = response.getWriter();
			out.write(json);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (out != null) {
				out.close();
			}
		}
	}

	/**
	 * 通用写json数据
	 * 
	 * @param response
	 * @param obj
	 * @throws IOException
	 */
	protected void writeJSON(HttpServletResponse response, Object obj)
			throws IOException {
		response.setContentType("text/html;charset=utf-8");
		JsonGenerator responseJsonGenerator = null;
		try {
			responseJsonGenerator = factory.createJsonGenerator(
					response.getOutputStream(), JsonEncoding.UTF8);
			responseJsonGenerator.writeObject(obj);
			///logger.info(" writeJSON obj responseResult:" + obj.toString());
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (responseJsonGenerator != null
					&& !responseJsonGenerator.isClosed()) {
				responseJsonGenerator.close();
				obj = null;
			}
		}

	}
	
	protected void sendMessageToRedis(String userType,String accountId,String sid,UserRedis userRedis){
		  try {
			    JSONObject object=new JSONObject();
				object.put("userType", userType);
				object.put("accountId", accountId==null?"":accountId);
				object.put("sid", sid==null?"":sid);
				userRedis.sendMessage("notticeMessageId",object.toString());
				object=null;
		} catch (Exception e) {
			e.printStackTrace();
		}
	 }
	
	/**
	 * 公用写日志方法
	 * @param logType
	 * @param content
	 * @param logLevel
	 * @param entityClass
	 */
	public void writeLog(String logType,String content,String logLevel,Class<?> entityClass){
		try {
			 LogWriteUtil.getSingleton().writeLog(logType, content, logLevel, entityClass);
		} catch (Exception e) {
			 e.printStackTrace();
		}
	}
	
	/**
	 * 获取所有requestParameter并判断指定参数是否为空
	 * @param request
	 * @param paramName
	 */
	public Map<String, String[]> getAllParameter(HttpServletRequest request,String fromMethod,String ... paramName){
		Map<String, String[]> parameterMap = request.getParameterMap();
		RegUtil util = RegUtil.getUtil();
		StringBuilder log=new StringBuilder("======parameterAll======fromMethod:"+fromMethod+"===");
		try {
			for (int i = 0; i < paramName.length; i++) {
				if(util.isNull(parameterMap.get(paramName[i]))){
					writeLog("","======="+paramName[i]+" is null",LOGLEVEL_INFO,BaseController.class);
					return null;
				}
				log.append(paramName[i]+":"+parameterMap.get(paramName[i])[0]+"===");
			}
		} catch (Exception e) {
			 e.printStackTrace();
		}
		writeLog("",log.toString(),LOGLEVEL_INFO,BaseController.class);
		return parameterMap;
	}
	/**
	 * 获取Parameter并判断是否为空
	 * @param request
	 * @param paramName
	 */
	public String getParameter(HttpServletRequest request,String paramName){
		String paramValue = request.getParameter(paramName);
		if(RegUtil.getUtil().isNull(paramValue)){
			writeLog("",paramName+" is null",LOGLEVEL_INFO,BaseController.class);
			return null;
		}
		return paramValue;
	}
	/**
	 * 封装订单
	 * @param request
	 * @param paramName
	 * return String 订单集合
	 */
	public List<AdvertiseInfoDto> getOrderList(HttpServletRequest req,Map<String,String[]> map) throws Exception{
		CustomerDto customerDto=(CustomerDto)req.getSession().getAttribute(SESSION_USER);//session得到user信息
		String [] checkTimes=map.get("checkTimes")[0].split(",");//播放周期
		String [] checkAdvertiseId=map.get("checkAdvertiseId")[0].split(",");//确认购买广告id
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");//日期格式化
		//根据购买广告id查询广告信息
		List<AdvertiseInfoDto> list = advertiseInfoService.findAdvertiseInfoByAdvertiserId(map.get("checkAdvertiseId")[0],map.get("deviceId")[0]);
		for (int i = 0; i < checkAdvertiseId.length; i++) {
			for (AdvertiseInfoDto dto : list) {
				if(dto.getId()==Integer.parseInt(checkAdvertiseId[i])){//把对应周期和小计放入dto
					dto.setStartDate(checkTimes[i].split("@")[0]);
					dto.setEndDate(checkTimes[i].split("@")[1]);
					//得到播放天数
					Long time =(sdf.parse(dto.getEndDate()).getTime()-sdf.parse(dto.getStartDate()).getTime())/(3600 * 24 * 1000);
					dto.setSumPrice(dto.getAd_price().multiply(new BigDecimal(time+1)).toString());
					dto.setAccount_id(customerDto.getAccount_id());
					dto.setAccount_IP(ipUtil.getIpAddress(req));
				}
			}
		}
		return list;
	}
	/**
	 * 判断是否那些时段可以播放
	 * @param request
	 * @param paramName
	 * return String 不能播放的时间列表
	 */
	public Map<String,String> isPlayTimeInterval(List<AdvertiseInfoDto> list){
		Map<String, String> map=new HashMap<>();
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
		for (AdvertiseInfoDto dto : list) {
			StringBuilder result=new StringBuilder();
			 Object[] values = new Object[] {//封装订单详情数据
				 dto.getDevice_id(),
				 dto.getIdle_time().split("-")[0],
				 dto.getIdle_time().split("-")[1],
				 dto.getStartDate(),
				 dto.getEndDate(),
				 dto.getPlay_number()
			 };
			List<DeviceVedioCountDto> notList = deviceVedioCountDao.findNoOrderTime(values);
			writeLog("","listSize:"+notList.size(),LOGLEVEL_INFO,BaseController.class);
			for (DeviceVedioCountDto countDto : notList) {
				result.append(sdf.format(countDto.getPlay_date())+",");
			}
			if(notList.size()>0){
				String key=dto.getDevice_id()+"-"+dto.getIdle_time()+"-"+dto.getShop_name();//设备id+时段+店铺名
				map.put(key, result.toString().substring(0,result.length()-1));//
				map.put("time"+key, dto.getStartDate()+"=="+dto.getEndDate());
			}
		}
		return map;
	}
	
	/**
	 * 获取用户折扣优惠
	 * @param request
	 * @param orderCount 订单条数
	 * return String 用户折扣
	 */
	public int queryUserDiscount(HttpServletRequest req,int orderCount){
		String count = systemSetDao.getSystemValueByKey(AD_COUNT_DISCOUNT);
		String disCount="1";
		if(orderCount<=(util.isNull(count)?Integer.MAX_VALUE:Integer.parseInt(count))){
			CustomerDto user=(CustomerDto)req.getSession().getAttribute(SESSION_USER);
			if(user.getReferrals_type()==1){
				disCount=systemSetDao.getSystemValueByKey(CLIENT_AD_PRICE_DISCOUNT);
			}else if(user.getReferrals_type()==2){
				disCount=systemSetDao.getSystemValueByKey(REFERRALS_AD_PRICE_DISCOUNT);
			}else if(user.getReferrals_type()==4){
				disCount=systemSetDao.getSystemValueByKey(OPERATION_CENTER_AD_PRICE_DISCOUNT);
			}
		}else{
			disCount=systemSetDao.getSystemValueByKey(AD_PRICE_DISCOUNT);
		}
		
		return util.isNumber(disCount)?Integer.parseInt(disCount):1;
	}
}
