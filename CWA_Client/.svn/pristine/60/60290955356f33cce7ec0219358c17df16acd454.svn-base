package com.cwa.client.web;

import java.util.Map;
import java.util.regex.Pattern;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.support.RequestContext;

import com.cwa.client.dto.CustomerDto;
import com.cwa.client.dto.CustomerWalletFlow;
import com.cwa.client.dto.RuturnMessageDto;
import com.cwa.client.model.Tb_Customer_Wallet;
import com.cwa.client.service.CustomerWalletService;
import com.cwa.client.utils.Constant;
import com.cwa.client.utils.PageModel;
import com.cwa.client.utils.RespCodeEnum;

import net.sf.json.JSONObject;

@Controller
@RequestMapping("/*/customerWallet")
public class CustomerWalletController extends BaseController<GobalRespParameter> implements Constant{

	@Resource// 订单详情service层
	private CustomerWalletService customerWalletService;
	
	//查询钱包流水
	@RequestMapping("/queryWalletFlow.do")
	public void queryWalletFlow(HttpServletRequest req, HttpServletResponse res) throws Exception{
		RuturnMessageDto parameter=new RuturnMessageDto();
		parameter.setSuccess(false);
		//获取请求参数并判断是否为空getPageModel
		String pageSize= getParameter(req, "pageSize");
		String pageNo= getParameter(req, "pageNo");
		try {
			if(pageSize==null){//每页大写为空则默认5条
				pageSize=NINE+"";
			}
			if(pageNo==null){//当前页为空则默认首页
				pageNo=ONE+"";
			}
			if(util.isNumber(pageSize)&&util.isNumber(pageNo)){//判断参数是否正确
				CustomerDto customerDto=(CustomerDto)req.getSession().getAttribute(SESSION_USER);//session得到user信息
				CustomerWalletFlow dto=new CustomerWalletFlow();
				dto.setFLOW_TYPE(getParameter(req, "type")==null?null:Integer.parseInt(getParameter(req, "type")));
				dto.setPageNo(Integer.parseInt(pageNo));
				dto.setPageSize(Integer.parseInt(pageSize));
				dto.setCUSTOMER_ID(customerDto.getAccount_id());//查询用户
				writeLog("", "==== accountId:"+customerDto.getAccount_id(), LOGLEVEL_INFO, CustomerWalletController.class);
				PageModel<CustomerWalletFlow> pageModel = customerWalletService.getPageModel(dto);
				parameter.setData(pageModel);
				parameter.setSuccess(true);
				writeLog("", "query walletFlow info success! data:"+pageModel, LOGLEVEL_INFO, CustomerWalletController.class);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		writeJSON(res, parameter);
		parameter=null;
	}
	//钱包流水删除
	@RequestMapping("/deleteWalletFlow.do")
	public void deleteWalletFlow(HttpServletRequest req, HttpServletResponse res) throws Exception{
		RuturnMessageDto parameter=new RuturnMessageDto();
		parameter.setSuccess(false);
		Map<String,String[]> map = getAllParameter(req,"deleteWalletFlow.do","ids");
		//RequestContext reqCt= new RequestContext(req);// 语言包
		try {
			if(map!=null){
				CustomerDto customerDto=(CustomerDto)req.getSession().getAttribute(SESSION_USER);//session得到user信息
				customerWalletService.deleteFlow(customerDto.getAccount_id(), map.get("ids")[0]);
				parameter.setSuccess(true);
				writeLog("", "delete success! accountId:"+customerDto.getAccount_id()+"===ids:"+map.get("ids")[0], LOGLEVEL_INFO, CustomerWalletController.class);
			}else{//请求参数无效
				parameter.setMsg(RespCodeEnum.global_parameter_isnull.getCode());
			}
				
		} catch (Exception e) {
			parameter.setMsg(RespCodeEnum.global_unknow_expiration.getCode());
			e.printStackTrace();
		}
		writeJSON(res, parameter);
		parameter=null;
	}
	
	@RequestMapping("/findWallet.do")
	public void findWallet(HttpServletRequest req, HttpServletResponse res) throws Exception{
		RuturnMessageDto parameter=new RuturnMessageDto();
		parameter.setSuccess(false);
		//RequestContext reqCt= new RequestContext(req);// 语言包
		try {
			CustomerDto customerDto=(CustomerDto)req.getSession().getAttribute(SESSION_USER);//session得到user信息
			Tb_Customer_Wallet entity = customerWalletService.findByAccountId(customerDto.getAccount_id());
			parameter.setSuccess(true);
			parameter.setData(entity);
			writeLog("", "query wallet success! accountId:"+customerDto.getAccount_id(), LOGLEVEL_INFO, CustomerWalletController.class);
		} catch (Exception e) {
			parameter.setMsg(RespCodeEnum.global_unknow_expiration.getCode());
			e.printStackTrace();
		}
		writeJSON(res, parameter);
		parameter=null;
	}
	
	//钱包充值
	@RequestMapping(value ="/walletRecharge.do", consumes = "application/json")
	public void walletRecharge(HttpServletRequest req, HttpServletResponse res,@RequestBody CustomerWalletFlow dto) throws Exception{
		RuturnMessageDto parameter=new RuturnMessageDto();
		parameter.setSuccess(false);
		Map<String,String[]> map = getAllParameter(req,"walletRecharge.do");
		RequestContext reqCt= new RequestContext(req);// 语言包
		try {
			if(map!=null){
				if(!Pattern.matches(REG_POSITIVE_REALNUMBER, dto.getAMOUNT().toString())){
					writeLog(LOGTYPE_SERVICE, "Recharge('"+dto.getAMOUNT().toString()+"') money format mistake", LOGLEVEL_INFO, CustomerWalletController.class);
					parameter.setData(reqCt.getMessage("pay.common.money.illegal"));
					writeJSON(res, parameter);
					return;
				}
				if(util.isNull(dto.getPay_type())){}
				CustomerDto customerDto=(CustomerDto)req.getSession().getAttribute(SESSION_USER);//session得到user信息
				dto.setCUSTOMER_ID(customerDto.getAccount_id());
				dto.setUserId(customerDto.getId());
				writeLog("", "accountId:"+customerDto.getAccount_id()+"===dto:"+JSONObject.fromObject(dto), LOGLEVEL_INFO, CustomerWalletController.class);
				parameter = customerWalletService.walletRecharge(dto,req);
				writeLog("", "end pay!!!  result:"+parameter.getMsg(), LOGLEVEL_INFO, CustomerWalletController.class);
				if(parameter.getMsg().equals(RespCodeEnum.wallet_withOut_error1.getCode())){
					parameter.setData(reqCt.getMessage("pay.common.wallet.freeze"));
				}else if(parameter.getMsg().equals(RespCodeEnum.wallet_withOut_error2.getCode())){
					parameter.setData(reqCt.getMessage("pay.common.wallet.notExist"));
				}else if(parameter.getMsg().equals(RespCodeEnum.FAILD.getCode())){
					parameter.setData(reqCt.getMessage("pay.common.recharge.faild"));
				}
				writeLog("", "walletRecharge success!", LOGLEVEL_INFO, CustomerWalletController.class);
			}else{//请求参数无效
				parameter.setData(reqCt.getMessage("common.exception.parameter"));
				parameter.setMsg(RespCodeEnum.global_parameter_isnull.getCode());
			}
				
		} catch (Exception e) {
			e.printStackTrace();
		}
		writeJSON(res, parameter);
		parameter=null;
	}
	
	//钱包提现
	@RequestMapping(value="/walletWithout.do", consumes = "application/json")
	public void walletWithout(HttpServletRequest req, HttpServletResponse res,@RequestBody CustomerWalletFlow dto) throws Exception{
		RuturnMessageDto parameter=new RuturnMessageDto();
		parameter.setSuccess(false);
		Map<String,String[]> map = getAllParameter(req,"walletWithout.do");
		RequestContext reqCt= new RequestContext(req);// 语言包
		try {
			if(map!=null){
				if(!Pattern.matches(REG_POSITIVE_REALNUMBER, dto.getAMOUNT().toString())){
					writeLog(LOGTYPE_SERVICE, "Without('"+dto.getAMOUNT().toString()+"') money format mistake", LOGLEVEL_INFO, CustomerWalletController.class);
					parameter.setData(reqCt.getMessage("pay.common.money.illegal"));
					writeJSON(res, parameter);
					return;
				}
				CustomerDto customerDto=(CustomerDto)req.getSession().getAttribute(SESSION_USER);//session得到user信息
				dto.setCUSTOMER_ID(customerDto.getAccount_id());
				dto.setUserId(customerDto.getId());
				writeLog("", "accountId:"+customerDto.getAccount_id()+"===dto:"+JSONObject.fromObject(dto), LOGLEVEL_INFO, CustomerWalletController.class);
				//parameter = customerWalletService.walletRechargeOrWithout(dto,req);
				if(parameter.getMsg().equals(RespCodeEnum.wallet_withOut_error.getCode())){
					parameter.setData(reqCt.getMessage("pay.common.money.notEnough"));
				}else if(parameter.getMsg().equals(RespCodeEnum.wallet_withOut_error1.getCode())){
					parameter.setData(reqCt.getMessage("pay.common.wallet.notExist"));
				}else if(parameter.getMsg().equals(RespCodeEnum.wallet_withOut_error2.getCode())){
					parameter.setData(reqCt.getMessage("pay.common.wallet.freeze"));
				}else if(parameter.getMsg().equals(RespCodeEnum.FAILD.getCode())){
					parameter.setData(reqCt.getMessage("pay.common.withDraw.faild"));
				}
				writeLog("", "walletWithout success!", LOGLEVEL_INFO, CustomerWalletController.class);
			}else{//请求参数无效
				parameter.setMsg(RespCodeEnum.global_parameter_isnull.getCode());
			}
				
		} catch (Exception e) {
			parameter.setMsg(RespCodeEnum.global_unknow_expiration.getCode());
			e.printStackTrace();
		}
		writeJSON(res, parameter);
		parameter=null;
	}
}
