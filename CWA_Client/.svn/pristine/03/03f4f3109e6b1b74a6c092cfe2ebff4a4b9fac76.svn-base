package com.cwa.client.web;

import java.io.File;
import java.lang.reflect.Field;
import java.sql.Timestamp;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.ServletRequestUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.RequestContext;

import com.cwa.client.dao.AdvertiserDao;
import com.cwa.client.dao.AdvertiserPicDao;
import com.cwa.client.dao.FileManagerDao;
import com.cwa.client.dto.AdDto;
import com.cwa.client.dto.AdvertiserDto;
import com.cwa.client.dto.AdvertiserPicDto;
import com.cwa.client.dto.CustomerDto;
import com.cwa.client.dto.FileManagerDto;
import com.cwa.client.dto.RuturnMessageDto;
import com.cwa.client.model.Tb_Advertiser;
import com.cwa.client.model.Tb_advertiser_pic;
import com.cwa.client.service.AdvertiserService;
import com.cwa.client.service.FileService;
import com.cwa.client.service.UserService;
import com.cwa.client.utils.Constant;
import com.cwa.client.utils.Encypter;
import com.cwa.client.utils.LogWriteUtil;
import com.cwa.client.utils.Tools;

@Controller
@RequestMapping("/*/AD/")
public class ADController extends BaseController<GobalRespParameter> implements Constant{
	
	private static final LogWriteUtil logWriteUtil = LogWriteUtil.getSingleton();
	
	/**
	 * 基础路径
	 */
	private static final String BASE_UPLOAD_PATH = Tools.readConfig("baseUploadPath");
	
	@Resource
	private AdvertiserDao advertiserDao;

	@Resource
	private AdvertiserPicDao advertiserPicDao;
	
	@Resource// 普通用户service层
	private UserService userService;
	
	@Resource
	private FileService fileService;
	
	@Resource
	private FileManagerDao fileManagerDao;
	
	@Resource// 广告商service层
	private AdvertiserService advertiserService;
	
	/**
	 * 激活为店主
	 * @param req
	 * @param res
	 * @throws Exception
	 */
	@RequestMapping("/activeAD.do")
	public void activeAD(HttpServletRequest req, HttpServletResponse res) throws Exception{
		// 返回的消息对象
		RuturnMessageDto rt = new RuturnMessageDto();
		// 判断是否登录
		if(req.getSession().getAttribute(SESSION_USER_NAME)==null){
			rt.setMsg("999");
			writeJSON(res, rt);
			return;
		}
		// 语言包
		RequestContext reqCt= new RequestContext(req);
		String userName = req.getSession().getAttribute(SESSION_USER_NAME).toString();
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "User "+userName+" active AD .", LOGLEVEL_INFO, ADController.class);
		/*// 获取手机号
		String mobile = ServletRequestUtils.getStringParameter(req,"mobile","").trim();
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "User mobile input "+mobile+".", LOGLEVEL_INFO, ADController.class);
		if(mobile==null||"".equals(mobile)){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "User mobile is empty.", LOGLEVEL_INFO, ADController.class);
			rt.setMsg(reqCt.getMessage("active.ad.tip.mobileEmpty"));
			writeJSON(res, rt);
			return;
		}
		// 获取登录密码
		String pwd = ServletRequestUtils.getStringParameter(req,"pwd","").trim();
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "User mobile pwd "+pwd+".", LOGLEVEL_INFO, ADController.class);
		if(pwd==null||"".equals(pwd)){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "User pwd is empty.", LOGLEVEL_INFO, ADController.class);
			rt.setMsg(reqCt.getMessage("active.ad.tip.pwdEmpty"));
			writeJSON(res, rt);
			return;
		}*/
		CustomerDto customerDto=(CustomerDto)req.getSession().getAttribute(SESSION_USER);//session得到user信息
		/*CustomerDto customerDto = (CustomerDto)userService.getUser(mobile, USERTYPE_CUSTOMER);
		if(customerDto==null){// 手机号错误
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "User mobile dont't exist.", LOGLEVEL_INFO, ADController.class);
			rt.setMsg(reqCt.getMessage("active.ad.tip.mobileOrPwdMistake"));
			writeJSON(res, rt);
			return;
		}
		// 验证密码是否正确
		if(!Encypter.getDecryptValue(customerDto.getPassword()).equals(pwd)){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "User password mistake.", LOGLEVEL_INFO, ADController.class);
			rt.setMsg(reqCt.getMessage("active.ad.tip.mobileOrPwdMistake"));
			writeJSON(res, rt);
			return;
		}*/
		// 判断是否已经激活过
		if(userService.getUser(customerDto.getMobile(), USERTYPE_CUSTOMER_ADVERTISER)!=null){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "User have active.", LOGLEVEL_INFO, ADController.class);
			rt.setMsg(reqCt.getMessage("active.ad.tip.havaActive"));
			writeJSON(res, rt);
			// 修改session
			req.getSession().setAttribute("userType",USERTYPE_CUSTOMER_ADVERTISER);
			return;
		}
		// 插入店主数据
		Tb_Advertiser entity = new Tb_Advertiser();
		entity.setMobile(customerDto.getMobile());
		entity.setReal_name(customerDto.getUser_name());
		entity.setUser_status(customerDto.getUser_status());
		entity.setOpen_date(new Timestamp(new Date().getTime()));
		entity.setEmail(customerDto.getEmail());
		entity.setAccount_id(customerDto.getAccount_id());
		entity.setAgent_id(customerDto.getAgent_id());
		entity.setAudit_status(ONE);
		entity.setCompany_id(customerDto.getCompany_id());
		entity.setPassword(customerDto.getPassword());
		entity.setReferrals_type(customerDto.getReferrals_type());
		entity.setReferrals_id(customerDto.getReferrals_id().toString());
		entity.setReg_status(ONE);
		advertiserService.saveUserAndInit(entity);
		// 修改session
		req.getSession().setAttribute("userType",USERTYPE_CUSTOMER_ADVERTISER);
		// 激活成功
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "User active success.", LOGLEVEL_INFO, ADController.class);
		rt.setMsg(reqCt.getMessage("active.ad.tip.success"));
		rt.setSuccess(true);
		writeJSON(res, rt);
	}
	
	/**
	 * 查询广告
	 */
	@RequestMapping("/query.do")
	public void query(HttpServletRequest req, HttpServletResponse res,AdDto param) throws Exception{
		String userName = req.getSession().getAttribute(SESSION_USER_NAME).toString();
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "User "+userName+" query AD .", LOGLEVEL_INFO, ADController.class);
		CustomerDto sessionUser = (CustomerDto)req.getSession().getAttribute(SESSION_USER);
		AdvertiserDto adUser = (AdvertiserDto)userService.queryUserObjByAccountIdAndUserType(sessionUser.getAccount_id(), USERTYPE_CUSTOMER_ADVERTISER);
		param.setAdvertiser_id(adUser.getId());
		// 查询并返回数据
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("data", advertiserDao.queryAD(param));
		map.put("count", advertiserDao.queryADCount(param));// 数据总量
		writeJSON(res, map);
	}
	
	
	/**
	 * 查询店铺广告
	 */
	@RequestMapping("/queryForStore.do")
	public void queryForStore(HttpServletRequest req, HttpServletResponse res) throws Exception{
		// 查询参数
		AdDto param = new AdDto();
		// 地址参数
		String addr = ServletRequestUtils.getStringParameter(req, "addr","");
		if(addr!=null&&!addr.trim().equals("")){
			addr = addr + "%";
			param.setAddr(addr);
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Addr:"+addr, LOGLEVEL_INFO, ADController.class);
		}
		// 价格参数
		String lessPrice = ServletRequestUtils.getStringParameter(req, "lessPrice","");
		Double lessPriceD = 0d;
		try {
			lessPriceD = Double.parseDouble(lessPrice);
			param.setLessPrice(lessPriceD.toString());
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "lessPrice:"+lessPriceD, LOGLEVEL_INFO, ADController.class);
		} catch (Exception e) {
			param.setLessPrice("");
		}
		String greaterPrice = ServletRequestUtils.getStringParameter(req, "greaterPrice","");
		Double greaterPriceD = 0d;
		try {
			greaterPriceD = Double.parseDouble(greaterPrice);
			param.setGreaterPrice(greaterPriceD.toString());
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "greaterPrice:"+greaterPriceD, LOGLEVEL_INFO, ADController.class);
		} catch (Exception e) {
			param.setGreaterPrice("");
		}
		// 店铺名
		String name = ServletRequestUtils.getStringParameter(req, "keyword","");
		if(name!=null&&!name.trim().equals("")){
			param.setName("%"+name+"%");
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "name:"+name, LOGLEVEL_INFO, ADController.class);
		}
		// 分页参数
		String pageNoStr = ServletRequestUtils.getStringParameter(req, "pageNo","");
		String pageSizeStr = ServletRequestUtils.getStringParameter(req, "pageSize","");
		if(Pattern.matches(REGEX_POSITIVE_INTEGER, pageNoStr)){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "pageNo:"+pageNoStr, LOGLEVEL_INFO, ADController.class);
			param.setPageNo(Integer.parseInt(pageNoStr));
		}
		if(Pattern.matches(REGEX_POSITIVE_INTEGER, pageSizeStr)){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "pageSizeStr:"+pageSizeStr, LOGLEVEL_INFO, ADController.class);
			param.setPageSize(Integer.parseInt(pageSizeStr));
		}
		// 查询并返回数据
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("data", advertiserDao.queryADForBuy(param));
		// 数据总量
		map.put("count", advertiserDao.queryADForBuyCount(param));
		writeJSON(res, map);
	}
	
	
	/**
	 * 更新用户信息
	 */
	@RequestMapping("/updUserInfo.do")
	public void updateUserInfo(HttpServletRequest req, HttpServletResponse res,AdDto param) throws Exception{
		userService.updUserInfo(req, res);
	}
	
	
	/**
	 * 上传图片(用于“成为广告商”)
	 * @param req
	 * @param res
	 * @param file
	 * @throws Exception
	 */
	@RequestMapping("/uploadADPic.do")
	public void uploadPicForChangeAD(HttpServletRequest req,HttpServletResponse res,MultipartFile file) throws Exception{
		String userName = req.getSession().getAttribute(SESSION_USER_NAME).toString();
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "User "+userName+" upload pic .", LOGLEVEL_INFO, ADController.class);
		RuturnMessageDto rmt = fileService.uploadPicFile(req, file, Tools.readConfig("adPicDir"));
		writeJSON(res, rmt);
	}
	
	
	/**
	 * 加载图片(用于“成为广告商”和首页展示广告)
	 * @param req
	 * @param res
	 * @throws Exception
	 */
	@RequestMapping("/loadADPic.do")
	public void loadADPic(HttpServletRequest req,HttpServletResponse res) throws Exception{
		fileService.loadPicFile(res, ServletRequestUtils.getStringParameter(req, "filePath",""));
	}
	
	
	/**
	 * 成为广告商
	 * @param req
	 * @param res
	 * @throws Exception
	 */
	@RequestMapping("/applyAD.do")
	public void applyAD(HttpServletRequest req,HttpServletResponse res) throws Exception{
		String userName = req.getSession().getAttribute(SESSION_USER_NAME).toString();
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "User "+userName+" apply advertiser .", LOGLEVEL_INFO, ADController.class);
		// 返回的消息对象
		RuturnMessageDto rt = new RuturnMessageDto();
		// 语言包
		RequestContext reqCt= new RequestContext(req);
		Object sessionUser = req.getSession().getAttribute(SESSION_USER);
		Field accountIdField = sessionUser.getClass().getDeclaredField("account_id");
		accountIdField.setAccessible(true);
		String accountId = accountIdField.get(sessionUser).toString();
		// 获取用户信息，判断是否审核通过，审核通过将不能修改
		AdvertiserDto advertiserDto = new AdvertiserDto();
		advertiserDto.setAccount_id(accountId);
		if(advertiserDao.queryAdvertiser(advertiserDto).get(0).getAudit_status()==TWO){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "User have audit pass.", LOGLEVEL_INFO, ADController.class);
			rt.setMsg(reqCt.getMessage("apply.advertiser.tip.audit.pass"));
			writeJSON(res, rt);
			return;
		}
		// 获取前台参数-店铺经营范围
		String managerScope = ServletRequestUtils.getStringParameter(req,"managerScope","").trim();
		// 判断是否输入店铺经营范围
		if("".equals(managerScope)){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Store manager scope param is empty.", LOGLEVEL_INFO, ADController.class);
			rt.setMsg(reqCt.getMessage("apply.advertiser.tip.store.managerScope.empty"));
			writeJSON(res, rt);
			return;
		}
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Store manager scope param is "+managerScope+".", LOGLEVEL_INFO, ADController.class);
		// 判断店铺经营范围字符是否过长
		if(managerScope.length()>20){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Store manager scope too long.", LOGLEVEL_INFO, ADController.class);
			rt.setMsg(reqCt.getMessage("apply.advertiser.tip.store.managerScope.tooLong"));
			writeJSON(res, rt);
			return;
		}
		// 获取前台参数-设备使用方式
		String deviceWay = ServletRequestUtils.getStringParameter(req,"deviceWay","").trim();
		// 判断是否输入设备使用方式
		if("".equals(deviceWay)){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Device way param is empty.", LOGLEVEL_INFO, ADController.class);
			rt.setMsg(reqCt.getMessage("apply.advertiser.tip.device.way.nochoose"));
			writeJSON(res, rt);
			return;
		}
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Device way param is "+deviceWay+".", LOGLEVEL_INFO, ADController.class);
		// 判断设备使用方式参数是否合法
		Integer deviceWayInt = 0;
		try {
			deviceWayInt = Integer.parseInt(deviceWay);
			if(deviceWayInt!=ZERO&&deviceWayInt!=ONE&&deviceWayInt!=TWO&&deviceWayInt!=THREE){
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Device way param is illegality.", LOGLEVEL_INFO, ADController.class);
				rt.setMsg(reqCt.getMessage("apply.advertiser.tip.device.way.param.illegality"));
				writeJSON(res, rt);
				return;
			}
		} catch (Exception e) {
			e.printStackTrace();
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Exception "+e.getMessage(), LOGLEVEL_INFO, ADController.class);
			rt.setMsg(reqCt.getMessage("apply.advertiser.tip.device.way.param.illegality"));
			writeJSON(res, rt);
			return;
		}
		// 获取前台参数-店铺名称
		String storeName = ServletRequestUtils.getStringParameter(req,"storeName","").trim();
		// 判断是否输入店铺名称
		if("".equals(storeName)){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Store name param is empty.", LOGLEVEL_INFO, ADController.class);
			rt.setMsg(reqCt.getMessage("apply.advertiser.tip.store.name.epmty"));
			writeJSON(res, rt);
			return;
		}
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Store name param is "+storeName+".", LOGLEVEL_INFO, ADController.class);
		// 判断店铺名称字符是否过长
		if(storeName.length()>40){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Store name too long.", LOGLEVEL_INFO, ADController.class);
			rt.setMsg(reqCt.getMessage("apply.advertiser.tip.store.name.tooLong"));
			writeJSON(res, rt);
			return;
		}
		// 获取前台参数-店铺详细地址
		String storeDetailAddr = ServletRequestUtils.getStringParameter(req,"storeDetailAddr","").trim();
		// 判断是否选择了省市区
		String[] pcas = storeDetailAddr.split("&")[0].split("\\*");
		for(int i=0;i<pcas.length;++i){
			if(pcas[i].indexOf("请选择")!=-1){
				switch(i){
				case 0:
					logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Not choose province.", LOGLEVEL_INFO, ADController.class);
					rt.setMsg(reqCt.getMessage("apply.advertiser.tip.notChooseProvince"));
					break;
				case 1:
					logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Not choose city.", LOGLEVEL_INFO, ADController.class);
					rt.setMsg(reqCt.getMessage("apply.advertiser.tip.notChooseCity"));
					break;
				case 2:
					logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Not choose area.", LOGLEVEL_INFO, ADController.class);
					rt.setMsg(reqCt.getMessage("apply.advertiser.tip.notChooseArea"));
					break;
				case 3:
					logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Not choose town.", LOGLEVEL_INFO, ADController.class);
					rt.setMsg(reqCt.getMessage("apply.advertiser.tip.notChooseTown"));
					break;
				}
				writeJSON(res, rt);
				return;
			}
		}
		// 判断是否输入店铺详细地址
		if("".equals(storeDetailAddr)||storeDetailAddr.split("&").length!=TWO||storeDetailAddr.split("&")[ONE].trim().equals("")){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Store detail addr param is empty.", LOGLEVEL_INFO, ADController.class);
			rt.setMsg(reqCt.getMessage("apply.advertiser.tip.store.detailAddr.empty"));
			writeJSON(res, rt);
			return;
		}
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Store detail addr is "+storeName+".", LOGLEVEL_INFO, ADController.class);
		// 判断店铺详细地址字符是否过长
		if(storeDetailAddr.length()>80){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Store detail addr too long.", LOGLEVEL_INFO, ADController.class);
			rt.setMsg(reqCt.getMessage("apply.advertiser.tip.store.detailAddr.tooLong"));
			writeJSON(res, rt);
			return;
		}
		// 获取前台参数-是否同意协议
		String agreement = ServletRequestUtils.getStringParameter(req,"agreement","").trim();
		if("".equals(agreement)||"false".equals(agreement)){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "User no agree protocol.", LOGLEVEL_INFO, ADController.class);
			rt.setMsg(reqCt.getMessage("noAgreeProtocol"));
			writeJSON(res, rt);
			return;
		}
		// 获取前台参数-店铺图片路径
		String filePaths =  ServletRequestUtils.getStringParameter(req,"filePaths","").trim();
		String[] filePathArray = filePaths.split(",");
		// 判断是否上传了五张以上的图片
		if(filePathArray.length>FIVE){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Upload picture mount is "+filePathArray.length, LOGLEVEL_INFO, ADController.class);
			rt.setMsg(reqCt.getMessage("apply.advertiser.tip.piture.tooMore"));
			writeJSON(res, rt);
			return;
		}
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Upload picture path is "+filePaths, LOGLEVEL_INFO, ADController.class);
		// 判断所上传的图片是否存在
		for(String filePath : filePathArray){
			if(filePath==null|filePath.trim().equals("")) continue;
			File file = new File(BASE_UPLOAD_PATH+filePath);
			if(!file.exists()){
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Upload picture is not exist.",LOGLEVEL_INFO, ADController.class);
				rt.setMsg(reqCt.getMessage("apply.advertiser.tip.piture.notExist")+"-fileLose");
				writeJSON(res, rt);
				return;
			}
		}
		// 根据登录账号和用户类型修改用户数据
		Tb_Advertiser tb_Advertiser = new Tb_Advertiser();
		tb_Advertiser.setAccount_id(accountId);
		tb_Advertiser.setScope(managerScope);
		tb_Advertiser.setDevice_use_type(deviceWayInt);
		tb_Advertiser.setShop_name(storeName);
		tb_Advertiser.setMailing_address(storeDetailAddr);
		tb_Advertiser.setAudit_status(ONE);
		tb_Advertiser.setAudit_datetime(new Timestamp(new Date().getTime()));
		tb_Advertiser.setReg_status(TWO);
		advertiserDao.updateAdvertiserInfoForApply(tb_Advertiser);
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Update tb_Advertiser success", LOGLEVEL_INFO, ADController.class);
		// 查询已经上传的图片
		List<AdvertiserPicDto> list = advertiserPicDao.queryByAccountId(accountId);
		// 重复上传的图片路径
		StringBuffer repetitionPicPath = new StringBuffer("");
		// 需要添加的图片对象		
		for(String filePath : filePathArray){
			boolean exist = false;
			for(AdvertiserPicDto tap : list){
				if(filePath.equals(tap.getPic())){
					exist = true;
					break;
				}
			}
			if(exist){
				repetitionPicPath.append(filePath);
			}else{
				if(filePath.trim().equals("")) continue;
				// 插入图片数据
				Tb_advertiser_pic param = new Tb_advertiser_pic();
				param.setAdvertiser_id(accountId);
				param.setPic(filePath);
				param.setCreate_time(new Timestamp(new Date().getTime()));
				advertiserPicDao.save(param);
				// 修改文件管理表的数据
				FileManagerDto fileManagerDto = new FileManagerDto();
				fileManagerDto.setStatus(TWO);
				fileManagerDto.setFilePath(filePath);
				fileManagerDao.upadteFileStatus(fileManagerDto);
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Insert pic data and update tb_file_manager success", LOGLEVEL_INFO, ADController.class);
			}
		}
		// 重复上传的路径保留，不存在的路径删除
		for(AdvertiserPicDto tap : list){
			if(repetitionPicPath.toString().indexOf(tap.getPic())==-1){
				advertiserPicDao.deleteById(tap.getId());
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Delete tb_advertiser_pic id="+tap.getId()+" success", LOGLEVEL_INFO, ADController.class);
				// 修改文件管理表的数据并且删除文件
				String path = tap.getPic();
				FileManagerDto fileManagerDto = new FileManagerDto();
				fileManagerDto.setStatus(THREE);
				fileManagerDto.setFilePath(path);
				fileManagerDao.upadteFileStatus(fileManagerDto);
				// 删除文件
				File file = new File(BASE_UPLOAD_PATH+path);
				if(file.exists()){
					file.delete();
				}
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Update tb_file_manager and delete file(path="+path+") success", LOGLEVEL_INFO, ADController.class);
			}
		}
		
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Apply success.",LOGLEVEL_INFO, ADController.class);
		rt.setMsg(reqCt.getMessage("apply.advertiser.tip.success"));
		rt.setSuccess(true);
		writeJSON(res, rt);
	}
	
	
	/**
	 * 加载广告商用户信息
	 * @param req
	 * @param res
	 * @throws Exception
	 */
	@RequestMapping("/loadAdvertiserInfo.do")
	public void loadAdvertiserInfo(HttpServletRequest req,HttpServletResponse res) throws Exception{
		String userName = req.getSession().getAttribute(SESSION_USER_NAME).toString();
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "User "+userName+" load advertiser info .", LOGLEVEL_INFO, ADController.class);
		// 返回的消息对象
		Map<String,Object> map = new HashMap<String,Object>();
		// 获取用户信息
		Object sessionUser = req.getSession().getAttribute(SESSION_USER);
		Field accountIdField = sessionUser.getClass().getDeclaredField("account_id");
		accountIdField.setAccessible(true);
		String accountId = accountIdField.get(sessionUser).toString();
		AdvertiserDto advertiserDto = new AdvertiserDto();
		advertiserDto.setAccount_id(accountId);
		map.put("data",advertiserDao.queryAdvertiser(advertiserDto).get(0));
		// 获取图片
		List<AdvertiserPicDto> list = advertiserPicDao.queryByAccountId(accountId);
		String[] pics = new String[list.size()];
		for(int i=0;i<pics.length;++i){
			pics[i] = list.get(i).getPic();
		}
		map.put("pic",pics);
		this.writeJSON(res, map);
	}
}
