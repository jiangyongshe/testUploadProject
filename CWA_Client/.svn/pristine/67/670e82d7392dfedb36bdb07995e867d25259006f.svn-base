package com.cwa.client.web;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.cwa.client.dto.AdvertiseInfoDto;
import com.cwa.client.dto.CustomerDto;
import com.cwa.client.dto.RuturnMessageDto;
import com.cwa.client.service.AdvertiseInfoService;
import com.cwa.client.service.OrderDetailService;
import com.cwa.client.service.OrderService;
import com.cwa.client.utils.Constant;
import com.cwa.client.utils.GsonUtil;
import com.cwa.client.utils.PageModel;
import com.cwa.client.utils.RespCodeEnum;

@Controller
@RequestMapping("/*/order")
public class AdOrderController extends BaseController<GobalRespParameter> implements Constant{

	@Resource// 订单详情service层
	private OrderDetailService orderDetailService;
	
	@Resource// 订单service层
	private OrderService orderService;
	
	@Resource// 普通用户service层
	private AdvertiseInfoService advertiseInfoService;
	//下单
	@RequestMapping("/placeAnOrder.do")
	public void placeAnOrder(HttpServletRequest req, HttpServletResponse res) throws Exception{
		RuturnMessageDto parameter=new RuturnMessageDto();
		//获取请求参数并判断是否为空getPageModel
		Map<String,String[]> map = getAllParameter(req,"placeAnOrder.do","checkTimes","checkAdvertiseId","deviceId");
		//RequestContext reqCt= new RequestContext(req);// 语言包
		try {
			if(map!=null){
				List<AdvertiseInfoDto> list = getOrderList(req,map);
				if(list.size()>0){
					String shoppIds=getParameter(req, "shoppIds");//购物车广告id
					writeLog("", "query advertise info success! list:"+GsonUtil.dtoToJson(list), LOGLEVEL_INFO, AdOrderController.class);
					Map<String, String> notOrderMap = isPlayTimeInterval(list);
					writeLog("", "query no order time success! map:"+GsonUtil.dtoToJson(notOrderMap), LOGLEVEL_INFO, AdOrderController.class);
					String strResult = orderService.createOrder(list,notOrderMap,shoppIds);//生成订单
					if(strResult.equals(RespCodeEnum.order_create_notTimeInterval.getCode())){
						parameter.setData("改时段已被购买完");
					}else if(strResult.equals(RespCodeEnum.order_playCycle_error.getCode())){
						parameter.setData("播放周期有误");
					}else{
						parameter.setData(notOrderMap);
					}
					parameter.setMsg(strResult);
				}else{
					parameter.setMsg(RespCodeEnum.order_adexpire_error.getCode());
				}
				
			}else{//请求参数无效
				parameter.setMsg(RespCodeEnum.global_parameter_isnull.getCode());
			}
				
		} catch (Exception e) {
			e.printStackTrace();
		}
		writeJSON(res, parameter);
		parameter=null;
	}
	
	//查询不可以下单时段
	@RequestMapping("/queryNoOrderTime.do")
	public void queryNoOrderTime(HttpServletRequest req, HttpServletResponse res) throws Exception{
		RuturnMessageDto parameter=new RuturnMessageDto();
		parameter.setSuccess(false);
		Map<String,String[]> map = getAllParameter(req,"queryNoOrderTime.do","checkTimes","checkAdvertiseId","deviceId");
		//RequestContext reqCt= new RequestContext(req);// 语言包
		try {
			if(map!=null){
				List<AdvertiseInfoDto> list = getOrderList(req,map);
				writeLog("", "query advertise info success! data:"+GsonUtil.dtoToJson(list), LOGLEVEL_INFO, AdOrderController.class);
				Map<String, String> notOrderMap = isPlayTimeInterval(list);
				writeLog("", "query NoOrderTime success! notOrderMap:"+GsonUtil.dtoToJson(notOrderMap), LOGLEVEL_INFO, AdOrderController.class);
				parameter.setData(notOrderMap);
				parameter.setSuccess(true);
			}else{//请求参数无效
				parameter.setMsg(RespCodeEnum.FAILD.getCode());
			}
				
		} catch (Exception e) {
			e.printStackTrace();
		}
		writeJSON(res, parameter);
		parameter=null;
	}
	
	//查询订单
	@RequestMapping("/queryOrder.do")
	public void queryOrder(HttpServletRequest req, HttpServletResponse res) throws Exception{
		RuturnMessageDto parameter=new RuturnMessageDto();
		parameter.setSuccess(false);
		//获取请求参数并判断是否为空getPageModel
		String pageSize= getParameter(req, "pageSize");
		String pageNo= getParameter(req, "pageNo");
		try {
			if(pageSize==null){//每页大写为空则默认5条
				pageSize=NINE+"";
			}
			if(pageNo==null){//当前页为空则默认首页
				pageNo=ONE+"";
			}
			if(util.isNumber(pageSize)&&util.isNumber(pageNo)){//判断参数是否正确
				CustomerDto customerDto=(CustomerDto)req.getSession().getAttribute(SESSION_USER);//session得到user信息
				AdvertiseInfoDto dto=new AdvertiseInfoDto();
				dto.setPageNo(Integer.parseInt(pageNo));
				dto.setPageSize(Integer.parseInt(pageSize));
				dto.setAccount_id(customerDto.getAccount_id());//查询用户
				writeLog("", "==== accountId:"+customerDto.getAccount_id(), LOGLEVEL_INFO, AdQueryController.class);
				PageModel<AdvertiseInfoDto> pageModel = orderService.getPageModel(dto);
				parameter.setData(pageModel);
				parameter.setSuccess(true);
				writeLog("", "query advertise info success! data:"+pageModel, LOGLEVEL_INFO, AdQueryController.class);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		writeJSON(res, parameter);
		parameter=null;
	}
}
