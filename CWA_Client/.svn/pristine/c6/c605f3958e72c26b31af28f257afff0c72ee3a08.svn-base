package com.cwa.client.web;

import java.sql.Timestamp;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.support.RequestContext;

import com.cwa.client.dto.BankCardInfoDto;
import com.cwa.client.dto.CustomerDto;
import com.cwa.client.dto.RuturnMessageDto;
import com.cwa.client.model.Tb_Bank_Card_Info;
import com.cwa.client.service.WithdrawService;
import com.cwa.client.utils.Constant;
import com.cwa.client.utils.DateUtils;
import com.cwa.client.utils.RegUtil;
import com.cwa.client.utils.RespCodeEnum;
import com.cwa.client.utils.ipUtil;

import net.sf.json.JSONObject;

/**
 * 广告出金
 * @author HZK
 */
@Controller
@RequestMapping("/*/AD/")
public class ADWithdrawController extends BaseController<GobalRespParameter> implements Constant{
	
	@Resource
	private WithdrawService withdrawService;
	
	/**
	 * 出金
	 * @param req
	 * @param res
	 * @throws Exception
	 */
	@RequestMapping("/withdraw.do")
	public void withdraw(HttpServletRequest req, HttpServletResponse res) throws Exception{
		withdrawService.withdraw(req, res,USERTYPE_CUSTOMER_ADVERTISER);
	}
	

	/**
	 * 绑卡
	 * @param req
	 * @param res
	 * @throws Exception
	 */
	@RequestMapping(value="/bankCard.do",method=RequestMethod.POST)
	public void bankCard(HttpServletRequest req, HttpServletResponse res,BankCardInfoDto dto) throws Exception{
		RuturnMessageDto parameter=new RuturnMessageDto();
		parameter.setSuccess(false);
		RequestContext reqCt= new RequestContext(req);// 语言包
		//获取请求参数并判断是否为空getPageModel
		try {
			writeLog("", "bankCard.do  data:"+JSONObject.fromObject(dto), LOGLEVEL_INFO, AdVideoController.class);
			CustomerDto sessionUser = (CustomerDto)req.getSession().getAttribute(SESSION_USER);
			Tb_Bank_Card_Info cardDto = withdrawService.queryBankCardInfo(sessionUser.getAccount_id(), FIVE);
			if(cardDto==null){
				Tb_Bank_Card_Info entity = new Tb_Bank_Card_Info();
				entity.setAccount_id(sessionUser.getAccount_id());
				entity.setAccount_type(FIVE);
				entity.setAudit_datetime(new Timestamp(DateUtils.string2UtilTime("2001-01-01 00:00:00.0", DateUtils.DATE_FORMAT_DEFAULT).getTime()));
				entity.setAudit_id("");
				if(!RegUtil.getUtil().isNull(dto.getBank_card_code())&&RegUtil.getUtil().isBankCard(dto.getBank_card_code())){
					entity.setBank_card_code(dto.getBank_card_code());
				}else{
					parameter.setMsg(RespCodeEnum.wallet_withOut_error4.getCode());
					writeJSON(res, parameter);
					parameter=null;
					return;
				}
				entity.setBank_card_name(dto.getBank_card_name());
				entity.setBank_code(dto.getBank_code());
				entity.setBranch_name(dto.getBranch_name());
				entity.setCard_type(dto.getCard_type());
				entity.setCommit_account_id(sessionUser.getAccount_id());
				entity.setCommit_datetime(new Timestamp(System.currentTimeMillis()));
				entity.setIp(ipUtil.getIpAddress(req));
				entity.setMobile(dto.getMobile());
				entity.setOpen_account_bank_name(dto.getOpen_account_bank_name());
				entity.setPapers_code(dto.getPapers_code());
				entity.setPapers_type(dto.getPapers_type());
				entity.setStatus(ONE);
				withdrawService.commissionBankCardInfo(entity);
			}else{
				cardDto.setAccount_id(sessionUser.getAccount_id());
				cardDto.setAccount_type(FIVE);
				if(!RegUtil.getUtil().isNull(dto.getBank_card_code())&&RegUtil.getUtil().isBankCard(dto.getBank_card_code())){
					cardDto.setBank_card_code(dto.getBank_card_code());
				}else{
					parameter.setMsg(RespCodeEnum.wallet_withOut_error4.getCode());
					writeJSON(res, parameter);
					parameter=null;
					return;
				}
				cardDto.setBank_card_name(dto.getBank_card_name());
				cardDto.setBank_code(dto.getBank_code());
				cardDto.setBranch_name(dto.getBranch_name());
				cardDto.setCard_type(dto.getCard_type());
				cardDto.setCommit_account_id(sessionUser.getAccount_id());
				cardDto.setCommit_datetime(new Timestamp(System.currentTimeMillis()));
				cardDto.setIp(ipUtil.getIpAddress(req));
				cardDto.setMobile(dto.getMobile());
				cardDto.setOpen_account_bank_name(dto.getOpen_account_bank_name());
				cardDto.setPapers_code(dto.getPapers_code());
				cardDto.setPapers_type(dto.getPapers_type());
				cardDto.setStatus(ONE);
				withdrawService.commissionBankCardInfoUpdate(cardDto);
			}
			parameter.setSuccess(true);
			parameter.setMsg(RespCodeEnum.SUCCESS.getCode());
		} catch (Exception e) {
			parameter.setMsg(RespCodeEnum.global_unknow_expiration.getCode());
			e.printStackTrace();
		}
		writeJSON(res, parameter);
		parameter=null;
	}
}
