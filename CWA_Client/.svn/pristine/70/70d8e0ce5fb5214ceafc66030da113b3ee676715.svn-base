package com.cwa.client.web.app;

import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Pattern;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.ServletRequestUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.cwa.client.constant.AppConatnt;
import com.cwa.client.constant.AppRetunCode;
import com.cwa.client.dao.CustomerDao;
import com.cwa.client.dto.CustomerDto;
import com.cwa.client.model.Tb_Customer;
import com.cwa.client.redis.RegPhoneRandomNumDto;
import com.cwa.client.redis.UserRedis;
import com.cwa.client.service.UserService;
import com.cwa.client.service.app.AccountService;
import com.cwa.client.utils.Constant;
import com.cwa.client.utils.Encypter;
import com.cwa.client.utils.LogWriteUtil;
import com.cwa.client.utils.Tools;
import com.cwa.client.utils.ipUtil;
import com.cwa.client.web.BaseController;
import com.cwa.client.web.GobalRespParameter;
import com.cwa.client.web.UserController;

import net.sf.json.JSONObject;

@Controller
@RequestMapping("/app/account")
public class AccountController extends BaseController<GobalRespParameter> implements Constant,AppConatnt {

	private static final LogWriteUtil logWriteUtil = LogWriteUtil.getSingleton();

	@Resource
	private UserService userService;
	
	@Resource
	private UserRedis userRedis;
	
	@Resource
	private CustomerDao customerDao;
	
	@Resource
	private AccountService accountService;
	
	@Resource
	private UserController userController;
	
	/**
	 * 登录请求
	 * @param req
	 * @param res
	 * @throws Exception
	 */
	@RequestMapping(value="/login/cm.do",method=RequestMethod.POST)
	public void login(HttpServletRequest req,HttpServletResponse res){
		try {
			// 获取IP
			String ip = ipUtil.getIpAddress(req);
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Ip "+ip+" Attempting to log in.", LOGLEVEL_INFO, AccountController.class);
			// 解析传入的参数
			JSONObject accountInfoJSON = null;
			try {
				accountInfoJSON = JSONObject.fromObject(Tools.b64Decode(ServletRequestUtils.getStringParameter(req, "accountInfo","").trim()));
			} catch (Exception e) {
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Afferent parameter exception.Exception is "+e.getMessage(), LOGLEVEL_ERROR, AccountController.class);
				accountInfoJSON = null;
			}
			if(accountInfoJSON == null){
				// 参数格式传入错误
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "The parameter format passed in when the logon operation is incorrect.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res, Tools.returnObj(AppRetunCode.LOGIN_PARAMS_ERROR_FORMAT.getCode(), AppRetunCode.LOGIN_PARAMS_ERROR_FORMAT.getDescribe()));
				return;
			}
			// 判断登录类型是否为安卓或者IOS
			int loginType = 0;
			try {
				loginType = accountInfoJSON.getInt("loginType");
			} catch (Exception e) {
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "'loginType' param exception "+e.getMessage(), LOGLEVEL_ERROR, AccountController.class);
				loginType = 0;
			}
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Login type is "+loginType, LOGLEVEL_INFO, AccountController.class);
			if(loginType!=LOGIN_TYPE_IOS&&loginType!=LOGIN_TYPE_ANDROID){
				// 登录类型异常
				responseJSON(res,Tools.returnObj(AppRetunCode.LOGIN_TYPE_ILLEGAL.getCode(), AppRetunCode.LOGIN_TYPE_ILLEGAL.getDescribe()));
				return;
			}
			// 账户
			Object accountId = accountInfoJSON.get("accountId");
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "AccountId is "+accountId, LOGLEVEL_INFO, AccountController.class);
			if(accountId==null||accountId.toString().equals("")){
				responseJSON(res,Tools.returnObj(AppRetunCode.LOGIN_NOT_ENTER_ACCOUNT_ID.getCode(), AppRetunCode.LOGIN_NOT_ENTER_ACCOUNT_ID.getDescribe()));
				return;
			}
			// 密码
			Object inputPwd = accountInfoJSON.get("password");
			if(inputPwd==null||inputPwd.toString().equals("")){
				// 未输入密码
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Users no enter ths password", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.LOGIN_NOT_ENTER_PWD.getCode(), AppRetunCode.LOGIN_NOT_ENTER_PWD.getDescribe()));
				return;
			}
			// 通过账户查找用户
			Object objUser = userService.queryUserObjByAccountIdAndUserType(accountId.toString(), USERTYPE_CUSTOMER);
			if(objUser==null){
				// 账户不存在
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "The account does not exist", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.ACCOUNT_ID_NOT_EXIST.getCode(), AppRetunCode.ACCOUNT_ID_NOT_EXIST.getDescribe()));
				return;
			}
			CustomerDto user = (CustomerDto)objUser;
			// 判断用户是否被禁用
			int userStatus = user.getUser_status();
			if(userStatus == USER_STATUS_FORBIDDEN){
				// 用户被禁用
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Users are disabled", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.ACCOUNT_ID_WAS_DISABLED.getCode(), AppRetunCode.ACCOUNT_ID_WAS_DISABLED.getDescribe()));
				return;
			}
			// 验证密码的正确性
			if(!inputPwd.toString().equals(Encypter.getDecryptValue(user.getPassword()))){
				// 密码输入错误
				responseJSON(res,Tools.returnObj(AppRetunCode.ACCOUNT_OR_PWD_MISTAKE.getCode(), AppRetunCode.ACCOUNT_OR_PWD_MISTAKE.getDescribe()));
				return;
			}
			// 将用户信息保存到SESSION
			HttpSession session = req.getSession();
			session.setAttribute(SESSION_USER, user);
			// 将用户名保存到SESSION
			String userName = accountId+"("+"id="+user.getId()+",type="+user.getT_type()+")";
			session.setAttribute(SESSION_USER_NAME, userName);
			// 将用户类型保存到SESSION
			session.setAttribute(SESSION_USER_TYPE, user.getT_type());
			// 将登录类型保存到SESSION
			session.setAttribute(LOGINTYPE,loginType);
			// 将SESSION保存到map,map存入REDIS,缓存200秒
			Map<String,Object> sessionMap = new HashMap<String,Object>();
			Enumeration<String> et = session.getAttributeNames();
			while(et.hasMoreElements()){
				String key = et.nextElement().toString();
				Object value = session.getAttribute(key);
				sessionMap.put(key,value);
			}
			userRedis.set(session.getId(), sessionMap, 200);
			// 返回SESSION ID
			responseJSON(res,Tools.returnObj(AppRetunCode.SUCCESS.getCode(), session.getId()));
		} catch (Exception e) {
			// 未知异常
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Exception "+e.getMessage(), LOGLEVEL_ERROR, AccountController.class);
			e.printStackTrace();
			responseJSON(res,Tools.returnObj(AppRetunCode.FAILD.getCode(), AppRetunCode.FAILD.getDescribe()));
		}
	}
	
	/**
	 * 注册时获取的验证码
	 * @param req
	 * @param res
	 */
	@RequestMapping(value="/registerVerificationCode/cm.do",method=RequestMethod.POST)
	public void registerVerificationCode(HttpServletRequest req,HttpServletResponse res){
		try {
			// 获取IP
			String ip = ipUtil.getIpAddress(req);
			// 获取手机号
			String mobile = ServletRequestUtils.getStringParameter(req, "mobile","").trim();
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Mobile:"+mobile+",Ip "+ip+" Gets the registration verification code.", LOGLEVEL_INFO, AccountController.class);
			if(mobile.equals("")){
				// 未输入手机号
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "No phone number entered.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.NOT_ENTER_MOBILE.getCode(), AppRetunCode.NOT_ENTER_MOBILE.getDescribe()));
				return;
			}
			if(!Pattern.matches(REG_POSITIVE_MOBILE, mobile)){
				// 手机号格式不正确
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "The phone number format is not correct.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.MOBILE_ERROR_FORMAT.getCode(), AppRetunCode.MOBILE_ERROR_FORMAT.getDescribe()));
				return;
			}
			// 验证手机号是否已经注册
			CustomerDto whereCustomerDto = new CustomerDto();
			whereCustomerDto.setMobile(mobile);
			if(customerDao.queryCount(whereCustomerDto, CustomerDao.class)>0){
				// 手机号已经注册
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "The phone number has been registered.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.PHONE_NUMBER_HAS_BEEN_REGISTERED.getCode(), AppRetunCode.PHONE_NUMBER_HAS_BEEN_REGISTERED.getDescribe()));
				return;
			}
			// 判断REDIS是否已经缓存了该手机号的验证码对象
			String redisKey = ZERO + mobile;
			Object verificationCodeRedisObj = userRedis.getObj(redisKey);
			if(verificationCodeRedisObj!=null){
				RegPhoneRandomNumDto regdto =(RegPhoneRandomNumDto)verificationCodeRedisObj;
				// 验证码生成时间至当前时间的差值
				long dVal = (System.currentTimeMillis() - regdto.getTimeStamp())/1000;
				if(dVal <= VERIFICATION_VALID_TIME){
					// 未过期
					Long validTime = VERIFICATION_VALID_TIME - dVal;// 有效时间
					logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "The validity of the verification code is "+validTime+" seconds by register.", LOGLEVEL_INFO, AccountController.class);
					responseJSON(res,Tools.returnObj(AppRetunCode.REGISTER_VERIFICATION_CODE_NOT_EXPIRED.getCode(), validTime));
					return;
				}
			}
			// 已过期,重新发送验证码
			boolean result = accountService.sendVerificationCode(mobile, ZERO, VERIFICATION_VALID_TIME);
			if(result){
				// 发送成功
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "The verification code is sent successfully.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.SUCCESS.getCode(), VERIFICATION_VALID_TIME));
				return;
			}else{
				// 发送失败
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Verification code sent failed.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.FAILD.getCode(), AppRetunCode.FAILD.getDescribe()));
				return;
			}
		} catch (Exception e) {
			// 未知异常
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Exception "+e.getMessage(), LOGLEVEL_ERROR, AccountController.class);
			e.printStackTrace();
			responseJSON(res,Tools.returnObj(AppRetunCode.FAILD.getCode(), AppRetunCode.FAILD.getDescribe()));
		}
	}
	
	/**
	 * 注册请求
	 * @param req
	 * @param res
	 * @throws Exception
	 */
	@RequestMapping(value="/register/cm.do",method=RequestMethod.POST)
	public void register(HttpServletRequest req,HttpServletResponse res){
		try {
			// 获取IP
			String ip = ipUtil.getIpAddress(req);
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Ip "+ip+" Registration is under way.", LOGLEVEL_INFO, AccountController.class);
			// 解析传入的参数
			JSONObject registerInfo = null;
			try {
				registerInfo = JSONObject.fromObject(Tools.b64Decode(ServletRequestUtils.getStringParameter(req, "registerInfo","").trim()));
			} catch (Exception e) {
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Afferent parameter exception.Exception is "+e.getMessage(), LOGLEVEL_ERROR, AccountController.class);
				registerInfo = null;
			}
			if(registerInfo == null){
				// 参数格式传入错误
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "The parameter format passed in during registration is incorrect.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res, Tools.returnObj(AppRetunCode.REGISTER_PARAMS_ERROR_FORMAT.getCode(), AppRetunCode.REGISTER_PARAMS_ERROR_FORMAT.getDescribe()));
				return;
			}
			// 手机号
			Object mobileObj = registerInfo.get("mobile");
			String mobile;
			if(mobileObj==null || (mobile = mobileObj.toString().trim()).equals("")){
				// 未输入手机号
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "No phone number entered.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.NOT_ENTER_MOBILE.getCode(), AppRetunCode.NOT_ENTER_MOBILE.getDescribe()));
				return;
			}
			if(!Pattern.matches(REG_POSITIVE_MOBILE, mobile)){
				// 手机号格式不正确
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "The phone number format is not correct.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.MOBILE_ERROR_FORMAT.getCode(), AppRetunCode.MOBILE_ERROR_FORMAT.getDescribe()));
				return;
			}
			// 验证手机号是否被注册
			CustomerDto whereCustomerDto = new CustomerDto();
			whereCustomerDto.setMobile(mobile);
			if(customerDao.queryCount(whereCustomerDto, CustomerDao.class)>0){
				// 手机号已经注册
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "The phone number has been registered.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.PHONE_NUMBER_HAS_BEEN_REGISTERED.getCode(), AppRetunCode.PHONE_NUMBER_HAS_BEEN_REGISTERED.getDescribe()));
				return;
			}
			whereCustomerDto.setMobile(null);
			whereCustomerDto.setAccount_id(mobile);
			if(customerDao.queryCount(whereCustomerDto, CustomerDao.class)>0){
				// 手机号已经注册
				responseJSON(res,Tools.returnObj(AppRetunCode.PHONE_NUMBER_HAS_BEEN_REGISTERED.getCode(), AppRetunCode.PHONE_NUMBER_HAS_BEEN_REGISTERED.getDescribe()));
				return;
			}
			// 验证码
			Object verificationCodeObj = registerInfo.get("verificationCode");
			String verificationCode;
			if(verificationCodeObj==null || (verificationCode = verificationCodeObj.toString().trim()).equals("")){
				// 未输入验证码
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "No verification code entered.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.NOT_ENTER_VERIFICATION_CODE.getCode(), AppRetunCode.NOT_ENTER_VERIFICATION_CODE.getDescribe()));
				return;
			}
			// 密码1
			Object passwordOneObj = registerInfo.get("passwordOne");
			String passwordOne;
			if(passwordOneObj==null || (passwordOne = passwordOneObj.toString().trim()).equals("")){
				// 未输入注册密码1
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Not entered password 1.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.NOT_ENTER_REGISTER_PASSWORD_ONE.getCode(), AppRetunCode.NOT_ENTER_REGISTER_PASSWORD_ONE.getDescribe()));
				return;
			}
			// 验证密码1格式是否正确
			if(passwordOne.length()<6||passwordOne.length()>12){
				// 密码格式不正确
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Incorrect password format.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.PASSWORD_ERROR_FORMAT.getCode(), AppRetunCode.PASSWORD_ERROR_FORMAT.getDescribe()));
				return;
			}
			// 密码2
			Object passwordTwoObj = registerInfo.get("passwordTwo");
			String passwordTwo;
			if(passwordTwoObj==null || (passwordTwo = passwordTwoObj.toString().trim()).equals("")){
				// 未输入注册密码2
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Not entered password 2.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.NOT_ENTER_REGISTER_PASSWORD_TWO.getCode(), AppRetunCode.NOT_ENTER_REGISTER_PASSWORD_TWO.getDescribe()));
				return;
			}
			// 判断密码1和密码2是否一致
			if(!passwordOne.equals(passwordTwo)){
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "The two passwords are inconsistent.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.REGISTER_TWO_PWD_ARE_INCONSISTENT.getCode(), AppRetunCode.REGISTER_TWO_PWD_ARE_INCONSISTENT.getDescribe()));
				return;
			}
			// 判断验证码是否正确
			String redisKey = ZERO + mobile;
			Object regdtoObj = userRedis.getObj(redisKey);
			if(regdtoObj == null){
				// 验证码已经失效
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Verification code failure", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.VERIFICATION_CODE_INVAILD.getCode(), AppRetunCode.VERIFICATION_CODE_INVAILD.getDescribe()));
				return;
			}
			RegPhoneRandomNumDto regdto = (RegPhoneRandomNumDto)regdtoObj;
			if((System.currentTimeMillis()-regdto.getTimeStamp())/1000 > VERIFICATION_VALID_TIME){
				// 验证码已经失效
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Verification code failure", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.VERIFICATION_CODE_INVAILD.getCode(), AppRetunCode.VERIFICATION_CODE_INVAILD.getDescribe()));
				return;
			}
			// 判断验证码是否正确
			if(!verificationCode.equals(regdto.getVaildCode())){
				// 验证码错误
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Verification code error", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.VERIFICATION_CODE_ERROR.getCode(), AppRetunCode.VERIFICATION_CODE_ERROR.getDescribe()));
				return;
			}
			// 邀请码
			Object invitationCode = registerInfo.get("invitationCode");
			// 保存用户表信息
			Map<String,Object> paramMap = new HashMap<String,Object>();
			paramMap.put("mobile", mobile);
			paramMap.put("password", passwordOne);
			paramMap.put("inviteCode", invitationCode==null?null:invitationCode.toString());
			userController.saveCustomerInfo(paramMap);
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Register success.", LOGLEVEL_INFO, AccountController.class);
			responseJSON(res,Tools.returnObj(AppRetunCode.SUCCESS.getCode(), AppRetunCode.SUCCESS.getDescribe()));
		} catch (Exception e) {
			// 未知异常
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Exception "+e.getMessage(), LOGLEVEL_ERROR, AccountController.class);
			e.printStackTrace();
			responseJSON(res,Tools.returnObj(AppRetunCode.FAILD.getCode(), AppRetunCode.FAILD.getDescribe()));
		}
	}
	
	/**
	 * 忘记密码时获取的验证码
	 * @param req
	 * @param res
	 */
	@RequestMapping(value="/forgetPwdVerificationCode/cm.do",method=RequestMethod.POST)
	public void forgetPwdVerificationCode(HttpServletRequest req,HttpServletResponse res){
		try {
			// 获取IP
			String ip = ipUtil.getIpAddress(req);
			// 获取手机号
			String mobile = ServletRequestUtils.getStringParameter(req, "mobile","").trim();
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Mobile:"+mobile+",Ip:"+ip+" Gets the forget password verification code.", LOGLEVEL_INFO, AccountController.class);
			if(mobile.equals("")){
				// 未输入手机号
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "No phone number entered.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.NOT_ENTER_MOBILE.getCode(), AppRetunCode.NOT_ENTER_MOBILE.getDescribe()));
				return;
			}
			if(!Pattern.matches(REG_POSITIVE_MOBILE, mobile)){
				// 手机号格式不正确
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "The phone number format is not correct.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.MOBILE_ERROR_FORMAT.getCode(), AppRetunCode.MOBILE_ERROR_FORMAT.getDescribe()));
				return;
			}
			// 验证手机号是否已经注册
			CustomerDto whereCustomerDto = new CustomerDto();
			whereCustomerDto.setMobile(mobile);
			if(customerDao.queryCount(whereCustomerDto, CustomerDao.class)<=0){
				// 手机号未注册
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "The phone number is not registered.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.PHONE_NUMBER_IS_NOT_REGISTERED.getCode(), AppRetunCode.PHONE_NUMBER_IS_NOT_REGISTERED.getDescribe()));
				return;
			}
			// 判断REDIS是否已经缓存了该手机号的验证码对象
			String redisKey = ONE + mobile;
			Object verificationCodeRedisObj = userRedis.getObj(redisKey);
			if(verificationCodeRedisObj!=null){
				RegPhoneRandomNumDto regdto =(RegPhoneRandomNumDto)verificationCodeRedisObj;
				// 验证码生成时间至当前时间的差值
				long dVal = (System.currentTimeMillis() - regdto.getTimeStamp())/1000;
				if(dVal <= VERIFICATION_VALID_TIME){
					// 未过期
					Long validTime = VERIFICATION_VALID_TIME - dVal;// 有效时间
					logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "The validity of the verification code is "+validTime+" seconds by forget password.", LOGLEVEL_INFO, AccountController.class);
					responseJSON(res,Tools.returnObj(AppRetunCode.FORGET_PWD_VERIFICATION_CODE_NOT_EXPIRED.getCode(), validTime));
					return;
				}
			}
			// 已过期,重新发送验证码
			boolean result = accountService.sendVerificationCode(mobile, ONE, VERIFICATION_VALID_TIME);
			if(result){
				// 发送成功
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "The verification code is sent successfully.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.SUCCESS.getCode(), VERIFICATION_VALID_TIME));
				return;
			}else{
				// 发送失败
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Verification code sent failed.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.FAILD.getCode(), AppRetunCode.FAILD.getDescribe()));
				return;
			}
		} catch (Exception e) {
			// 未知异常
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Exception "+e.getMessage(), LOGLEVEL_ERROR, AccountController.class);
			e.printStackTrace();
			responseJSON(res,Tools.returnObj(AppRetunCode.FAILD.getCode(), AppRetunCode.FAILD.getDescribe()));
		}
	}
	
	/**
	 * 忘记密码请求
	 * @param req
	 * @param res
	 */
	@RequestMapping(value="/forgetPwd/cm.do",method=RequestMethod.POST)
	public void forgetPwd(HttpServletRequest req,HttpServletResponse res){
		try {
			// 获取IP
			String ip = ipUtil.getIpAddress(req);
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Ip "+ip+" Change the password via SMS verification code.", LOGLEVEL_INFO, AccountController.class);
			// 解析传入的参数
			JSONObject forgetPwdInfo = null;
			try {
				forgetPwdInfo = JSONObject.fromObject(Tools.b64Decode(ServletRequestUtils.getStringParameter(req, "forgetPwdInfo","").trim()));
			} catch (Exception e) {
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Afferent parameter exception.Exception is "+e.getMessage(), LOGLEVEL_ERROR, AccountController.class);
				forgetPwdInfo = null;
			}
			if(forgetPwdInfo == null){
				// 参数格式传入错误
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "The parameter format passed in when the password is forgotten is incorrect.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res, Tools.returnObj(AppRetunCode.FORGET_PWD_PARAMS_ERROR_FORMAT.getCode(), AppRetunCode.FORGET_PWD_PARAMS_ERROR_FORMAT.getDescribe()));
				return;
			}
			// 手机号
			Object mobileObj = forgetPwdInfo.get("mobile");
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "mobile is "+mobileObj, LOGLEVEL_INFO, AccountController.class);
			if(mobileObj==null||mobileObj.toString().equals("")){
				// 手机号为空
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "No phone number entered.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res, Tools.returnObj(AppRetunCode.NOT_ENTER_MOBILE.getCode(),AppRetunCode.NOT_ENTER_MOBILE.getDescribe()));
				return;
			}
			String mobile = mobileObj.toString();
			// 验证码
			Object verificationCodeObj = forgetPwdInfo.get("verificationCode");
			if(verificationCodeObj==null||verificationCodeObj.toString().equals("")){
				// 未输入验证码
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "No verification code entered.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.NOT_ENTER_VERIFICATION_CODE.getCode(), AppRetunCode.NOT_ENTER_VERIFICATION_CODE.getDescribe()));
				return;
			}
			String verificationCode = verificationCodeObj.toString();
			// 密码
			Object passwordObj = forgetPwdInfo.get("password");
			if(passwordObj==null||passwordObj.equals("")){
				// 未输入密码
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "No password entered.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.NOT_ENTER_NEW_PASSWORD.getCode(), AppRetunCode.NOT_ENTER_NEW_PASSWORD.getDescribe()));
				return;
			}
			String password = passwordObj.toString();
			if(!Pattern.matches(REG_POSITIVE_MOBILE,mobile)){
				// 手机号格式错误
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Password format error", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.MOBILE_ERROR_FORMAT.getCode(), AppRetunCode.MOBILE_ERROR_FORMAT.getDescribe()));
				return;
			}
			if(password.length()<6||password.length()>12){
				// 密码格式不正确
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Incorrect password format.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.PASSWORD_ERROR_FORMAT.getCode(), AppRetunCode.PASSWORD_ERROR_FORMAT.getDescribe()));
				return;
			}
			// 判断手机号是否存在
			CustomerDto whereCustomerDto = new CustomerDto();
			whereCustomerDto.setMobile(mobile);
			if(customerDao.queryCount(whereCustomerDto, CustomerDao.class)<=0){
				// 手机号未注册
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "The phone number is not registered.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.PHONE_NUMBER_IS_NOT_REGISTERED.getCode(), AppRetunCode.PHONE_NUMBER_IS_NOT_REGISTERED.getDescribe()));
				return;
			}
			String redisKey = ONE+mobile;
			Object regdtoObj = userRedis.getObj(redisKey);
			if(regdtoObj == null){
				// 验证码已经失效
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Verification code failure", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.VERIFICATION_CODE_INVAILD.getCode(), AppRetunCode.VERIFICATION_CODE_INVAILD.getDescribe()));
				return;
			}
			RegPhoneRandomNumDto regdto = (RegPhoneRandomNumDto)regdtoObj;
			if((System.currentTimeMillis()-regdto.getTimeStamp())/1000 > VERIFICATION_VALID_TIME){
				// 验证码已经失效
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Verification code failure", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.VERIFICATION_CODE_INVAILD.getCode(), AppRetunCode.VERIFICATION_CODE_INVAILD.getDescribe()));
				return;
			}
			// 判断验证码是否正确
			if(!verificationCode.equals(regdto.getVaildCode())){
				// 验证码错误
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Verification code error", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res,Tools.returnObj(AppRetunCode.VERIFICATION_CODE_ERROR.getCode(), AppRetunCode.VERIFICATION_CODE_ERROR.getDescribe()));
				return;
			}
			// 修改密码
			Tb_Customer tbCustomer = new Tb_Customer();
			tbCustomer.setPassword(Encypter.getEncryptValue(password));
			customerDao.update(tbCustomer, whereCustomerDto);
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "The password has been changed successfully via SMS verification code.", LOGLEVEL_INFO, AccountController.class);
			responseJSON(res, Tools.returnObj(AppRetunCode.SUCCESS.getCode(), AppRetunCode.SUCCESS.getDescribe()));
		} catch (Exception e) {
			// 未知异常
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Exception "+e.getMessage(), LOGLEVEL_ERROR, AccountController.class);
			e.printStackTrace();
			responseJSON(res,Tools.returnObj(AppRetunCode.FAILD.getCode(), AppRetunCode.FAILD.getDescribe()));
		}
	}

	/**
	 * APP跳转至首页
	 * @param req
	 * @param res
	 */
	@RequestMapping(value="/toHome/cm.do",method=RequestMethod.GET)
	public void toHome(HttpServletRequest req,HttpServletResponse res){
		try {
			// 获取IP
			String ip = ipUtil.getIpAddress(req);
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Ip "+ip+" Redirect to the home page..", LOGLEVEL_INFO, AccountController.class);
			// 解析传入的参数
			String sessionId = null;
			try {
				sessionId = Tools.b64Decode(ServletRequestUtils.getStringParameter(req, "sid","").trim());
			} catch (Exception e) {
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Afferent parameter exception.Exception is "+e.getMessage(), LOGLEVEL_ERROR, AccountController.class);
				sessionId = null;
			}
			if(sessionId == null || (sessionId=sessionId.trim()).equals("")){
				// sessionId值异常
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Session id incorrect.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res, Tools.returnObj(AppRetunCode.SESSION_ID_INCONSISTENT.getCode(), AppRetunCode.SESSION_ID_INCONSISTENT.getDescribe()));
				return;
			}
			// 获取缓存在REDIS的session
			Object sessionObj = userRedis.getObj(sessionId);
			userRedis.delete(sessionId);// 清除REDIS缓存
			if(sessionObj == null){
				// sessionId值异常
				logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Session id incorrect.", LOGLEVEL_INFO, AccountController.class);
				responseJSON(res, Tools.returnObj(AppRetunCode.SESSION_ID_INCONSISTENT.getCode(), AppRetunCode.SESSION_ID_INCONSISTENT.getDescribe()));
				return;
			}
			HttpSession session = req.getSession();
			@SuppressWarnings("unchecked")
			Map<String,Object> sessionMap = (Map<String, Object>) sessionObj;
			for(Map.Entry<String, Object> entry : sessionMap.entrySet()){
				String key = entry.getKey();
				Object value = entry.getValue();
				session.setAttribute(key, value);
			}
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Update Session info success.", LOGLEVEL_INFO, AccountController.class);
			res.sendRedirect("/chinese/mobile/html/index.html");
		} catch (Exception e) {
			// 未知异常
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Exception "+e.getMessage(), LOGLEVEL_ERROR, AccountController.class);
			e.printStackTrace();
			responseJSON(res,Tools.returnObj(AppRetunCode.FAILD.getCode(), AppRetunCode.FAILD.getDescribe()));
		}
	}
	
}
