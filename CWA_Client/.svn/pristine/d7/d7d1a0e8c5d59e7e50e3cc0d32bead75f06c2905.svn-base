package com.cwa.client.service;


import java.sql.Timestamp;
import java.util.Date;
import java.util.HashMap;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.cwa.client.dao.ClientInOutMoneyDao;
import com.cwa.client.dao.CustomerCommReportDao;
import com.cwa.client.dao.CustomerWalletDao;
import com.cwa.client.dao.CustomerWalletFlowDao;
import com.cwa.client.dto.BankServerTcpDto;
import com.cwa.client.dto.CustomerWalletFlow;
import com.cwa.client.dto.RuturnMessageDto;
import com.cwa.client.model.Tb_Customer_Wallet;
import com.cwa.client.model.Tb_Customer_Wallet_Flow;
import com.cwa.client.model.Tb_client_in_out_money;
import com.cwa.client.utils.Constant;
import com.cwa.client.utils.DateUtils;
import com.cwa.client.utils.LogWriteUtil;
import com.cwa.client.utils.PageModel;
import com.cwa.client.utils.PageVars;
import com.cwa.client.utils.RegUtil;
import com.cwa.client.utils.RespCodeEnum;
import com.cwa.client.utils.UniqId;
import com.cwa.client.web.nettytcpsocket.AliPayDirDto;
import com.cwa.client.web.nettytcpsocket.PayUtil;
import com.cwa.client.web.nettytcpsocket.RespMsgDto;

import net.sf.json.JSONObject;

@Service
public class CustomerWalletService implements Constant{
	
	private static final LogWriteUtil logWriteUtil = LogWriteUtil.getSingleton();
	
	@Resource
	private CustomerWalletDao customerWalletDao;
	
	@Resource
	private CustomerWalletFlowDao customerWalletFlowDao;
	
	@Resource
	private ClientInOutMoneyDao clientInOutMoneyDao;
	
	@Resource
	private CustomerCommReportDao customerCommReportDao;
	
	@Resource
	private BankServerTcpDto bankApiServer;
	
  
	public Tb_Customer_Wallet findById(Integer id){
		return customerWalletDao.findById(id);
	}
	
	public void save(Tb_Customer_Wallet entity) throws Exception{
		customerWalletDao.save(entity);
	}
	
	
	public void update(Tb_Customer_Wallet entity) throws Exception {
		customerWalletDao.update(entity);
	}
	
	public void deleteFlow(String accountId,String ids){
		customerWalletFlowDao.deleteByAccountId(accountId, ids);
	}
	
	public Tb_Customer_Wallet findByAccountId(String accountId){
		return customerWalletDao.findByAccountId(accountId);
	}
	
	public RuturnMessageDto walletRechargeOrWithout(CustomerWalletFlow dto,String loginType) throws Exception{
		RuturnMessageDto parameter=new RuturnMessageDto();
		parameter.setSuccess(false); 
		Tb_Customer_Wallet walletDto = customerWalletDao.findByAccountId(dto.getCUSTOMER_ID());
		String orderNoStr="";
		if(walletDto==null){
			parameter.setMsg(RespCodeEnum.wallet_withOut_error2.getCode());
			return parameter;
		}else{
			if(walletDto.getSTATE()==2){
				parameter.setMsg(RespCodeEnum.wallet_withOut_error1.getCode());
				return parameter;
			}
			if(dto.getFLOW_TYPE()==1){
				orderNoStr=WALLET_RECHARGE;
			}else{
				if(walletDto.getAMOUNT().compareTo(dto.getAMOUNT())==-1){
					parameter.setMsg(RespCodeEnum.wallet_withOut_error.getCode());
					return parameter;
				}
				orderNoStr=WALLET_WITHDRAW;
			}
		}
		logWriteUtil.writeLog("", "insert Tb_Customer_Wallet success CustomerWallet:"+JSONObject.fromObject(walletDto), LOGLEVEL_INFO, CustomerWalletService.class);
		Tb_Customer_Wallet_Flow entity =new Tb_Customer_Wallet_Flow();//钱包流水
		entity.setAMOUNT(dto.getAMOUNT());
		entity.setCUSTOMER_ID(dto.getCUSTOMER_ID());
		entity.setFLOW_TYPE(dto.getFLOW_TYPE());
		entity.setOPEN_DATE(new Timestamp(new Date().getTime()));
		customerWalletFlowDao.save(entity);
		logWriteUtil.writeLog("", "insert Tb_Customer_Wallet_Flow success CustomerWalletFlow:"+JSONObject.fromObject(entity), LOGLEVEL_INFO, CustomerWalletService.class);
		String payType = dto.getPay_type();// TODO 订单支付方式
		String accountId=dto.getCUSTOMER_ID();
		String currDate=DateUtils.TimestamptoString(new Timestamp(System.currentTimeMillis()),DateUtils.DATE_FORMAT_YYYYMMDDHHMMSSSSS);
		String serialNumber=currDate+dto.getUserId()+orderNoStr+payType+UniqId.getallSymbolArrayStr(2); 
		Tb_client_in_out_money tb_client_in_out_money = new Tb_client_in_out_money();//出金流水
		tb_client_in_out_money.setSerial_number(serialNumber.substring(2));
		tb_client_in_out_money.setAccount_id(accountId);
		tb_client_in_out_money.setIn_out_type(dto.getFLOW_TYPE()==1?IN_OUT_TYPE_RECHARGE:IN_OUT_TYPE_WITHDRAW);
		tb_client_in_out_money.setAmount(dto.getAMOUNT());
		tb_client_in_out_money.setOpen_date(new Timestamp(new Date().getTime()));
		tb_client_in_out_money.setCommit_account_id(accountId);
		tb_client_in_out_money.setRemark(dto.getFLOW_TYPE()==1?"钱包充值":"钱包提现");
		tb_client_in_out_money.setPay_type(payType);
		tb_client_in_out_money.setAccount_type(SIX);
		// 判断是否大于审核阈值
		tb_client_in_out_money.setStatus(TWO);
		clientInOutMoneyDao.insert(tb_client_in_out_money);
		tb_client_in_out_money.setIn_out_type(FOUR);
		logWriteUtil.writeLog("", "insert Tb_client_in_out_money success! begin pay!!!! inOutEntity:"+JSONObject.fromObject(tb_client_in_out_money), LOGLEVEL_INFO, CustomerWalletService.class);

		AliPayDirDto aliPayDto=new AliPayDirDto();
		aliPayDto.setTimestamp(DateUtils.getNowDay(DateUtils.DATE_FORMAT_DEFAULT));
		aliPayDto.setSubject(dto.getFLOW_TYPE()==1?"翔云宝充值":"翔云宝提现");
		aliPayDto.setReturn_url(PAY_RETURN_URL);
		aliPayDto.setNotify_url(PAY_NOTIFY_UTL);
		
		RespMsgDto aliPayDir = PayUtil.getSignPayUtil(bankApiServer).aliPayDir(tb_client_in_out_money, aliPayDto, loginType);
		
		logWriteUtil.writeLog("", "wallet change success!!!! RespMsgDto:"+JSONObject.fromObject(aliPayDir), LOGLEVEL_INFO, CustomerWalletService.class);
		if(RespCodeEnum.SUCCESS.getCode().equals(aliPayDir.getRespCode())){
			parameter.setSuccess(true);
			parameter.setData(aliPayDir.getRespContent());
			parameter.setMsg(RespCodeEnum.SUCCESS.getCode());
		}else{
			parameter.setMsg(RespCodeEnum.FAILD.getCode());
		}
		
		return parameter;
	}
	
	public PageModel<CustomerWalletFlow> getPageModel(CustomerWalletFlow dto){
    	PageVars pvNm=this.getVars(dto,1);
		PageVars pvlist=this.getVars(dto,0);
		PageModel<CustomerWalletFlow> pm=customerWalletFlowDao.getPageModel(pvlist.getSbstr().toString(), pvNm.getSbstr().toString(),pvNm.getParams(),dto.getPageNo(),dto.getPageSize());
		return pm;
    	
    }
    
    
    private PageVars getVars(CustomerWalletFlow dto,int type){
    	 PageVars pv=new PageVars();
		 StringBuffer sbStr=new StringBuffer(); 
		 HashMap<String,Object> params = new HashMap<String,Object>();
    	 if(type==1){
    		 sbStr.append("select count(1) as cnum  from Tb_Customer_Wallet_Flow f where 1=1");
    	 } else {
    		 sbStr.append("select * from Tb_Customer_Wallet_Flow f where 1=1");
    	 }
    	 if(!RegUtil.getUtil().isNull(dto.getCUSTOMER_ID())){
    		 sbStr.append(" and f.CUSTOMER_ID=:CUSTOMER_ID ");
    		 params.put("CUSTOMER_ID", dto.getCUSTOMER_ID());
    	 }
    	 if(dto.getFLOW_TYPE()!=null){
    		 sbStr.append(" and f.flow_type=:flow_type ");
    		 params.put("flow_type", dto.getFLOW_TYPE());
    	 }
    	  if (type!=1) {
				sbStr.append(" ORDER BY f.id desc LIMIT " + (dto.getPageNo() - 1) * dto.getPageSize() + "," + dto.getPageSize());
		  }
    	  logWriteUtil.writeLog("", "pageQuery sql:"+sbStr.toString()+"===param:"+JSONObject.fromObject(dto), LOGLEVEL_INFO, CustomerWalletService.class);
    	  System.out.println("sql:"+sbStr.toString());
    	  pv.setSbstr(sbStr);
	      pv.setParams(params);
		 
		 return pv;
    }	
}
