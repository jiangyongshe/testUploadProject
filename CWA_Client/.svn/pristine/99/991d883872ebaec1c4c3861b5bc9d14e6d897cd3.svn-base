package com.cwa.client.web;

import java.lang.reflect.Field;
import java.sql.Timestamp;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.ServletRequestUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.RequestContext;

import com.cwa.client.dao.AdvertiserDao;
import com.cwa.client.dao.AdvertiserPicDao;
import com.cwa.client.dao.FileManagerDao;
import com.cwa.client.dto.AdDto;
import com.cwa.client.dto.AdvertiserDto;
import com.cwa.client.dto.AdvertiserPicDto;
import com.cwa.client.dto.CustomerDto;
import com.cwa.client.dto.RuturnMessageDto;
import com.cwa.client.model.Tb_Advertiser;
import com.cwa.client.service.AdvertiserService;
import com.cwa.client.service.FileService;
import com.cwa.client.service.UserService;
import com.cwa.client.utils.Constant;
import com.cwa.client.utils.LogWriteUtil;
import com.cwa.client.utils.Tools;

@Controller
@RequestMapping("/*/AD/")
public class ADController extends BaseController<GobalRespParameter> implements Constant{
	
	private static final LogWriteUtil logWriteUtil = LogWriteUtil.getSingleton();
	
	
	@Resource
	private AdvertiserDao advertiserDao;

	@Resource
	private AdvertiserPicDao advertiserPicDao;
	
	@Resource// 普通用户service层
	private UserService userService;
	
	@Resource
	private FileService fileService;
	
	@Resource
	private FileManagerDao fileManagerDao;
	
	@Resource// 广告商service层
	private AdvertiserService advertiserService;
	
	/**
	 * 激活为店主
	 * @param req
	 * @param res
	 * @throws Exception
	 */
	@RequestMapping("/activeAD.do")
	public void activeAD(HttpServletRequest req, HttpServletResponse res) throws Exception{
		// 返回的消息对象
		RuturnMessageDto rt = new RuturnMessageDto();
		// 判断是否登录
		if(req.getSession().getAttribute(SESSION_USER_NAME)==null){
			rt.setMsg("999");
			writeJSON(res, rt);
			return;
		}
		// 语言包
		RequestContext reqCt= new RequestContext(req);
		String userName = req.getSession().getAttribute(SESSION_USER_NAME).toString();
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "User "+userName+" active AD .", LOGLEVEL_INFO, ADController.class);
		//session得到user信息
		CustomerDto customerDto=(CustomerDto)req.getSession().getAttribute(SESSION_USER);
		// 判断是否已经激活过
		if(userService.getUser(customerDto.getMobile(), USERTYPE_CUSTOMER_ADVERTISER)!=null){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "User have active.", LOGLEVEL_INFO, ADController.class);
			rt.setMsg(reqCt.getMessage("active.ad.tip.havaActive"));
			writeJSON(res, rt);
			// 修改session
			req.getSession().setAttribute("userType",USERTYPE_CUSTOMER_ADVERTISER);
			return;
		}
		// 插入店主数据
		Tb_Advertiser entity = new Tb_Advertiser();
		entity.setMobile(customerDto.getMobile());
		entity.setReal_name(customerDto.getUser_name());
		entity.setUser_status(customerDto.getUser_status());
		entity.setOpen_date(new Timestamp(new Date().getTime()));
		entity.setEmail(customerDto.getEmail());
		entity.setAccount_id(customerDto.getAccount_id());
		entity.setAgent_id(customerDto.getAgent_id());
		entity.setAudit_status(ONE);
		entity.setCompany_id(customerDto.getCompany_id());
		entity.setPassword(customerDto.getPassword());
		entity.setReferrals_type(customerDto.getReferrals_type());
		entity.setReferrals_id(customerDto.getReferrals_id().toString());
		entity.setReg_status(ONE);
		entity.setSuperior(ONE);
		if(entity.getReferrals_type()==3){
			entity.setSuperior(TWO);
		}
		advertiserService.saveUserAndInit(entity);
		// 修改session
		req.getSession().setAttribute("userType",USERTYPE_CUSTOMER_ADVERTISER);
		// 激活成功
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "User active success.", LOGLEVEL_INFO, ADController.class);
		rt.setMsg(reqCt.getMessage("active.ad.tip.success"));
		rt.setSuccess(true);
		writeJSON(res, rt);
	}
	
	/**
	 * 查询广告
	 */
	@RequestMapping("/query.do")
	public void query(HttpServletRequest req, HttpServletResponse res,AdDto param) throws Exception{
		String userName = req.getSession().getAttribute(SESSION_USER_NAME).toString();
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "User "+userName+" query AD .", LOGLEVEL_INFO, ADController.class);
		CustomerDto sessionUser = (CustomerDto)req.getSession().getAttribute(SESSION_USER);
		AdvertiserDto adUser = (AdvertiserDto)userService.queryUserObjByAccountIdAndUserType(sessionUser.getAccount_id(), USERTYPE_CUSTOMER_ADVERTISER);
		param.setAdvertiser_id(adUser.getId());
		// 查询并返回数据
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("data", advertiserDao.queryAD(param));
		map.put("count", advertiserDao.queryADCount(param));// 数据总量
		writeJSON(res, map);
	}
	
	/**
	 * 查询店铺广告
	 */
	@RequestMapping("/queryForStore.do")
	public void queryForStore(HttpServletRequest req, HttpServletResponse res) throws Exception{
		// 查询参数
		AdDto param = new AdDto();
		// 地址参数
		String addr = ServletRequestUtils.getStringParameter(req, "addr","");
		if(addr!=null&&!addr.trim().equals("")){
			addr = addr + "%";
			param.setAddr(addr);
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "Addr:"+addr, LOGLEVEL_INFO, ADController.class);
		}
		// 价格参数
		String lessPrice = ServletRequestUtils.getStringParameter(req, "lessPrice","");
		Double lessPriceD = 0d;
		try {
			lessPriceD = Double.parseDouble(lessPrice);
			param.setLessPrice(lessPriceD.toString());
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "lessPrice:"+lessPriceD, LOGLEVEL_INFO, ADController.class);
		} catch (Exception e) {
			param.setLessPrice("");
		}
		String greaterPrice = ServletRequestUtils.getStringParameter(req, "greaterPrice","");
		Double greaterPriceD = 0d;
		try {
			greaterPriceD = Double.parseDouble(greaterPrice);
			param.setGreaterPrice(greaterPriceD.toString());
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "greaterPrice:"+greaterPriceD, LOGLEVEL_INFO, ADController.class);
		} catch (Exception e) {
			param.setGreaterPrice("");
		}
		// 店铺名
		String name = ServletRequestUtils.getStringParameter(req, "keyword","");
		if(name!=null&&!name.trim().equals("")){
			param.setName("%"+name+"%");
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "name:"+name, LOGLEVEL_INFO, ADController.class);
		}
		// 分页参数
		String pageNoStr = ServletRequestUtils.getStringParameter(req, "pageNo","");
		String pageSizeStr = ServletRequestUtils.getStringParameter(req, "pageSize","");
		if(Pattern.matches(REGEX_POSITIVE_INTEGER, pageNoStr)){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "pageNo:"+pageNoStr, LOGLEVEL_INFO, ADController.class);
			param.setPageNo(Integer.parseInt(pageNoStr));
		}
		if(Pattern.matches(REGEX_POSITIVE_INTEGER, pageSizeStr)){
			logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "pageSizeStr:"+pageSizeStr, LOGLEVEL_INFO, ADController.class);
			param.setPageSize(Integer.parseInt(pageSizeStr));
		}
		// 查询并返回数据
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("data", advertiserDao.queryADForBuy(param));
		// 数据总量
		map.put("count", advertiserDao.queryADForBuyCount(param));
		writeJSON(res, map);
	}
	
	
	/**
	 * 更新用户信息
	 */
	@RequestMapping("/updUserInfo.do")
	public void updateUserInfo(HttpServletRequest req, HttpServletResponse res,AdDto param) throws Exception{
		userService.updUserInfo(req, res);
	}
	
	
	/**
	 * 上传图片(用于“成为广告商”)
	 * @param req
	 * @param res
	 * @param file
	 * @throws Exception
	 */
	@RequestMapping("/uploadADPic.do")
	public void uploadPicForChangeAD(HttpServletRequest req,HttpServletResponse res,MultipartFile file) throws Exception{
		String userName = req.getSession().getAttribute(SESSION_USER_NAME).toString();
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "User "+userName+" upload pic .", LOGLEVEL_INFO, ADController.class);
		RuturnMessageDto rmt = fileService.uploadPicFile(req, file, Tools.readConfig("adPicDir"));
		writeJSON(res, rmt);
	}
	
	
	/**
	 * 加载图片(用于“成为广告商”和首页展示广告)
	 * @param req
	 * @param res
	 * @throws Exception
	 */
	@RequestMapping("/loadADPic.do")
	public void loadADPic(HttpServletRequest req,HttpServletResponse res) throws Exception{
		fileService.loadPicFile(res, ServletRequestUtils.getStringParameter(req, "filePath",""));
	}
	
	
	/**
	 * 成为广告商
	 * @param req
	 * @param res
	 * @throws Exception
	 */
	@RequestMapping("/applyAD.do")
	public void applyAD(HttpServletRequest req,HttpServletResponse res) throws Exception{
		advertiserService.applyAD(req, res);
	}
	
	
	/**
	 * 加载广告商用户信息
	 * @param req
	 * @param res
	 * @throws Exception
	 */
	@RequestMapping("/loadAdvertiserInfo.do")
	public void loadAdvertiserInfo(HttpServletRequest req,HttpServletResponse res) throws Exception{
		String userName = req.getSession().getAttribute(SESSION_USER_NAME).toString();
		logWriteUtil.writeLog(LOGTYPE_CONTROLLER, "User "+userName+" load advertiser info .", LOGLEVEL_INFO, ADController.class);
		// 返回的消息对象
		Map<String,Object> map = new HashMap<String,Object>();
		// 获取用户信息
		Object sessionUser = req.getSession().getAttribute(SESSION_USER);
		Field accountIdField = sessionUser.getClass().getDeclaredField("account_id");
		accountIdField.setAccessible(true);
		String accountId = accountIdField.get(sessionUser).toString();
		AdvertiserDto advertiserDto = new AdvertiserDto();
		advertiserDto.setAccount_id(accountId);
		map.put("data",advertiserDao.queryAdvertiser(advertiserDto).get(0));
		// 获取图片
		List<AdvertiserPicDto> list = advertiserPicDao.queryByAccountId(accountId);
		String[] pics = new String[list.size()];
		for(int i=0;i<pics.length;++i){
			pics[i] = list.get(i).getPic();
		}
		map.put("pic",pics);
		this.writeJSON(res, map);
	}
}
