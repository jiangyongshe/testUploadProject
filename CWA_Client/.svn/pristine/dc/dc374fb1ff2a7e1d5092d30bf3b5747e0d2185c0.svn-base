package com.cwa.client.interceptor;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

import com.cwa.client.dto.AdvertiserDto;
import com.cwa.client.dto.CustomerDto;
import com.cwa.client.utils.Constant;
import com.cwa.client.utils.RespCodeEnum;
import com.cwa.client.web.BaseController;
import com.cwa.client.web.GobalRespParameter;

public class GlobalInterceptor extends BaseController<GobalRespParameter> implements HandlerInterceptor, Constant {

	@Override
	public void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)
			throws Exception {
	}

	@Override
	public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)
			throws Exception {
	}

	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object arg2) throws Exception {

		// 获取URI路径
		String uri = request.getRequestURI().toString();
		// 根路径不拦截
		if(uri.equals("/")){
			return true;
		}
		// session user对象
		Object sessionUserObj = request.getSession().getAttribute(SESSION_USER);
		// session user type
		Object sessionUserType = request.getSession().getAttribute(SESSION_USER_TYPE);
		// 如果SESSION_USER为空就返回false 已拦截 跳转到登录页
		if (sessionUserObj == null  || "".equals(sessionUserObj)
								    ||
			sessionUserType == null || "".equals(sessionUserType)
			) {
			// 拦截后的处理
			interceptDispose(request,response);
			return false;
		}
		// 获取推荐好友二维码图片的路径不拦截
		if(uri.indexOf("/recommend/QR-code.do")!=-1){
			return true;
		}
		// 判断二级目录路径是否是广告路径
		int secondSpritIndex = uri.indexOf("/",uri.indexOf("/")+1);
		int thirdSpritIndex = uri.indexOf("/",secondSpritIndex+1);
		String secondPath = uri.substring(secondSpritIndex+1,thirdSpritIndex);
		if(secondPath.equals("forward")||secondPath.equals("redirect")){
			// 转发和重定向取第三级路径
			int fourthPath = uri.indexOf("/",thirdSpritIndex+1);
			if(fourthPath==-1){
				secondPath = uri.substring(thirdSpritIndex+1);
			}else{
				secondPath = uri.substring(thirdSpritIndex+1,fourthPath);
			}
		}
		if(secondPath.equals("AD")){
			// 判断session对象能否为AdvertiserDto的实例
			if(!(sessionUserObj instanceof AdvertiserDto)){
				// 拦截后的处理
				interceptDispose(request,response);
				return false;
			}
		}else{
			// 判断session对象能否为CustomerDto的实例
			if(!(sessionUserObj instanceof CustomerDto)){
				// 拦截后的处理
				interceptDispose(request,response);
				return false;
			}
		}
		return true;
	}

	/**
	 * 拦截后的处理
	 * @param request
	 * @param response
	 * @throws Exception
	 */
	public void interceptDispose(HttpServletRequest request,HttpServletResponse response) throws Exception{
		// 获取当前请求路径
		String requsetUrl = request.getRequestURL().toString();
		// 判断此请求是否是ajax
		boolean isAjax = request.getHeader("X-Requested-With") != null && "XMLHttpRequest".equals(request.getHeader("X-Requested-With").toString());

		writeLog(LOGTYPE_INTERCEPTOR, "requsetUrl \"" + requsetUrl + "\" was intercepted and redirect login page,is isAjax " + (isAjax), LOGLEVEL_INFO, GlobalInterceptor.class);

		if (!isAjax) {
			// 如果是ajax请求响应头会有，x-requested-with；
			String path = request.getServerName()+":"+request.getServerPort();
			if (requsetUrl.startsWith("https")) {
				response.sendRedirect("https://" + path);
			} else {
				response.sendRedirect("http://" + path);
			}
		} else {
			// 返回的消息对象
			GobalRespParameter parameter = new GobalRespParameter();
			parameter.setRespCode(RespCodeEnum.global_session_expiration.getCode());
			parameter.setRespMessge(RespCodeEnum.global_session_expiration.getMessage());
			writeJSON(response, parameter);
		}
	}
}
