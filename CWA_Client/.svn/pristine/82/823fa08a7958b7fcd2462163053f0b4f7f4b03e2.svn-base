package com.cwa.client.dao;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import com.cwa.client.dto.ClientInOutMoneyDto;
import com.cwa.client.dto.InOutMoneyParamDto;
import com.cwa.client.model.Tb_client_in_out_money;
import com.cwa.client.utils.Constant;
import com.cwa.client.utils.LogWriteUtil;

public class ClientInOutMoneyDao extends BaseDao<Tb_client_in_out_money, ClientInOutMoneyDto> implements Constant {

	private static final LogWriteUtil logWriteUtil = LogWriteUtil.getSingleton();
	
	/**
	 * 查询出金明细
	 * @param param
	 * @return
	 */
	public List<ClientInOutMoneyDto> queryDetail(InOutMoneyParamDto param){
		String startTime = param.getStartTime();
		String endTime = param.getEndTime();
		Integer pageNo = param.getPageNo();
		Integer pageSize = param.getPageSize();
		List<Object> params = new ArrayList<Object>();
		params.add(param.getAccount_type());
		params.add(param.getAccount_id());
		StringBuffer sql = new StringBuffer(
			    "SELECT A.AMOUNT,A.STATUS,A.OPEN_DATE FROM tb_client_in_out_money A "
			   +"WHERE A.ACCOUNT_TYPE=? AND A.IN_OUT_TYPE='1' AND A.ACCOUNT_ID = ? " );
		// 判断是否根据开始时间查询
		if(startTime!=null&&!"".equals(startTime)){
			sql.append("AND DATE_FORMAT(A.OPEN_DATE,'"+MYSQL_DATE_FORMAT_YMD+"')>=DATE_FORMAT(?,'"+MYSQL_DATE_FORMAT_YMD+"') ");
			params.add(startTime);
		}
		// 判断是否根据结束时间查询
		if(endTime!=null&&!"".equals(endTime)){
			sql.append("AND DATE_FORMAT(A.OPEN_DATE,'"+MYSQL_DATE_FORMAT_YMD+"')<=DATE_FORMAT(?,'"+MYSQL_DATE_FORMAT_YMD+"') ");
			params.add(endTime);
		}
		// 排序
		sql.append("ORDER BY DATE_FORMAT(A.OPEN_DATE,'"+MYSQL_DATE_FORMAT_YCDHMS+"') DESC ");
		// 判断是否分页
		if(pageNo!=null&&pageNo!=0&&pageSize!=null&&pageSize!=0){
			sql.append("LIMIT ?,? ");
			params.add((pageNo-1)*pageSize);
			params.add(pageSize);
		}
		logWriteUtil.writeLog(LOGTYPE_DBQUERY, "sql:"+sql+";"+"params:"+params, LOGLEVEL_INFO, ClientInOutMoneyDao.class);
		List<ClientInOutMoneyDto> list = null;
		list = this.jdbcTemplate.query(sql.toString(), BeanPropertyRowMapper.newInstance(ClientInOutMoneyDto.class),params.toArray());
		logWriteUtil.writeLog(LOGTYPE_DBQUERY, "size:"+list.size(), LOGLEVEL_INFO, ClientInOutMoneyDao.class);
		return list;
	}
	
	/**
	 * 查询出金明细数量
	 * @param param
	 * @return
	 */
	public int queryDetailCount(InOutMoneyParamDto param){
		String startTime = param.getStartTime();
		String endTime = param.getEndTime();
		List<Object> params = new ArrayList<Object>();
		params.add(param.getAccount_type());
		params.add(param.getAccount_id());
		StringBuffer sql = new StringBuffer(
			    "SELECT COUNT(1) FROM tb_client_in_out_money A "
			   +"WHERE A.ACCOUNT_TYPE=? AND A.IN_OUT_TYPE='1' AND A.ACCOUNT_ID = ? " );
		// 判断是否根据开始时间查询
		if(startTime!=null&&!"".equals(startTime)){
			sql.append("AND DATE_FORMAT(A.OPEN_DATE,'"+MYSQL_DATE_FORMAT_YMD+"')>=DATE_FORMAT(?,'"+MYSQL_DATE_FORMAT_YMD+"') ");
			params.add(startTime);
		}
		// 判断是否根据结束时间查询
		if(endTime!=null&&!"".equals(endTime)){
			sql.append("AND DATE_FORMAT(A.OPEN_DATE,'"+MYSQL_DATE_FORMAT_YMD+"')<=DATE_FORMAT(?,'"+MYSQL_DATE_FORMAT_YMD+"') ");
			params.add(endTime);
		}
		logWriteUtil.writeLog(LOGTYPE_DBQUERY, "sql:"+sql+";"+"params:"+params, LOGLEVEL_INFO, ClientInOutMoneyDao.class);
		int count = this.jdbcTemplate.queryForObject(sql.toString(), Integer.class,params.toArray());
		logWriteUtil.writeLog(LOGTYPE_DBQUERY, "count:"+count, LOGLEVEL_INFO, ClientInOutMoneyDao.class);
		return count;
	}
	
	/**
	 * 插入数据
	 */
	@SuppressWarnings("unchecked")
	public void insert(Tb_client_in_out_money param){
		Map<String,Object> map = this.packageInsertSQL(param);
		String sql = map.get("sql").toString();
		List<Object> params = (List<Object>)map.get("params");
		logWriteUtil.writeLog(LOGTYPE_DBQUERY, "sql:"+sql+";"+"params:"+params, LOGLEVEL_INFO, ClientInOutMoneyDao.class);
		jdbcTemplate.update(sql,params.toArray());
	}
	
	/**
	 * 修改数据
	 * @param whereParam where条件的值
	 * @param updateParam update的值
	 */
	@SuppressWarnings("unchecked")
	public void updateData(ClientInOutMoneyDto whereParam,Tb_client_in_out_money updateParam){
		Map<String,Object> updateMap = this.packageUpateSQL(updateParam,"A");
		Map<String,Object> whereMap = this.packageWhereSQL(whereParam,"A");
		String sql = updateMap.get("sql").toString()+whereMap.get("sql").toString();
		List<Object> params = new ArrayList<Object>();
		params.addAll((List<Object>)updateMap.get("params"));
		params.addAll((List<Object>)whereMap.get("params"));
		System.out.println("sql:"+sql+";"+"params:"+params);
		logWriteUtil.writeLog(LOGTYPE_DBQUERY, "sql:"+sql+";"+"params:"+params, LOGLEVEL_INFO, ClientInOutMoneyDao.class);
		jdbcTemplate.update(sql,params.toArray());
	}
}
